(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{"7FBX":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return c})),a.d(t,"default",(function(){return b}));var i=a("Fcif"),o=a("+I+c"),r=(a("mXGw"),a("/FXl")),n=a("TjRS"),c=(a("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/DataStructures/BloomFilter.mdx"}});var l={_frontmatter:c},s=n.a;function b(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)(s,Object(i.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"bloom-filter"},"Bloom filter"),Object(r.b)("p",null,'A Bloom filter is a space-efficient probabilistic data structure, conceived by Burton\nHoward Bloom in 1970, that is used to test whether an element is a member of a set. False\npositive matches are possible, but false negatives are not â€“ in other words, a query\nreturns either "possibly in set" or "definitely not in set." Elements can be added to the\nset, but not removed (though this can be addressed with the counting Bloom filter\nvariant); the more items added, the larger the probability of false positives. (Source:\nWikipedia)'),Object(r.b)("p",null,Object(r.b)("img",{alt:"Data Structure Visualization",src:"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Bloom_filter.svg/360px-Bloom_filter.svg.png"})),Object(r.b)("h2",{id:"references"},"References"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/"}),"Geeksforgeeks")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Bloom_filter"}),"Wikipedia")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=bEmBh1HtYrw"}),"YouTube")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://hackernoon.com/probabilistic-data-structures-bloom-filter-5374112a7832"}),"Hackernoon"))))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/DataStructures/BloomFilter.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-data-structures-bloom-filter-mdx-bde9a0b7999d2d1bca5e.js.map