(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{MR3E:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return b})),n.d(t,"default",(function(){return c}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),r=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Pattern/ZAlgorithm.mdx"}});var o={_frontmatter:b},l=r.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(l,i({},o,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"z-algorithm"},"Z algorithm"),Object(a.b)("p",null,'The Z-algorithm finds occurrences of a "word" ',Object(a.b)("inlineCode",{parentName:"p"},"W"),' within a main "text string"\n',Object(a.b)("inlineCode",{parentName:"p"},"T")," in linear time ",Object(a.b)("inlineCode",{parentName:"p"},"O(|W| + |T|)"),"."),Object(a.b)("p",null,"Given a string ",Object(a.b)("inlineCode",{parentName:"p"},"S")," of length ",Object(a.b)("inlineCode",{parentName:"p"},"n"),", the algorithm produces an array, ",Object(a.b)("inlineCode",{parentName:"p"},"Z")," where\n",Object(a.b)("inlineCode",{parentName:"p"},"Z[i]")," represents the longest substring starting from ",Object(a.b)("inlineCode",{parentName:"p"},"S[i]")," which is also a\nprefix of ",Object(a.b)("inlineCode",{parentName:"p"},"S"),". Finding ",Object(a.b)("inlineCode",{parentName:"p"},"Z")," for the string obtained by concatenating the word,\n",Object(a.b)("inlineCode",{parentName:"p"},"W")," with a nonce character, say ",Object(a.b)("inlineCode",{parentName:"p"},"$")," followed by the text, ",Object(a.b)("inlineCode",{parentName:"p"},"T"),", helps with\npattern matching, for if there is some index ",Object(a.b)("inlineCode",{parentName:"p"},"i")," such that ",Object(a.b)("inlineCode",{parentName:"p"},"Z[i]")," equals the\npattern length, then the pattern must be present at that point."),Object(a.b)("p",null,"While the ",Object(a.b)("inlineCode",{parentName:"p"},"Z")," array can be computed with two nested loops in ",Object(a.b)("inlineCode",{parentName:"p"},"O(|W| * |T|)"),"\ntime, the following strategy shows how to obtain it in linear time, based on the\nidea that as we iterate over the letters in the string (index ",Object(a.b)("inlineCode",{parentName:"p"},"i")," from ",Object(a.b)("inlineCode",{parentName:"p"},"1")," to\n",Object(a.b)("inlineCode",{parentName:"p"},"n - 1"),"), we maintain an interval ",Object(a.b)("inlineCode",{parentName:"p"},"[L, R]")," which is the interval with maximum\n",Object(a.b)("inlineCode",{parentName:"p"},"R")," such that ",Object(a.b)("inlineCode",{parentName:"p"},"1 ≤ L ≤ i ≤ R")," and ",Object(a.b)("inlineCode",{parentName:"p"},"S[L...R]")," is a prefix that is also a\nsubstring (if no such interval exists, just let ",Object(a.b)("inlineCode",{parentName:"p"},"L = R = - 1"),"). For ",Object(a.b)("inlineCode",{parentName:"p"},"i = 1"),", we\ncan simply compute ",Object(a.b)("inlineCode",{parentName:"p"},"L")," and ",Object(a.b)("inlineCode",{parentName:"p"},"R")," by comparing ",Object(a.b)("inlineCode",{parentName:"p"},"S[0...]")," to ",Object(a.b)("inlineCode",{parentName:"p"},"S[1...]"),". (Source:\nWikipedia)"),Object(a.b)("h2",{id:"complexity"},"Complexity"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",i({parentName:"tr"},{align:null}),"Name"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Preprocessing"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Average"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Worst"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Space"),Object(a.b)("th",i({parentName:"tr"},{align:"left"}),"Comments"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),"Z algorithm"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"m"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"n + m"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"n ","*"," m"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"m"),Object(a.b)("td",i({parentName:"tr"},{align:"left"}))))),Object(a.b)("p",null,"*"," Where n = length of the source; m = length of the query pattern; k = size of\nthe Alphabet"),Object(a.b)("h2",{id:"references"},"References"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.geeksforgeeks.org/z-algorithm-linear-time-pattern-searching-algorithm/"}),"Geeksforgeeks")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.hackerearth.com/practice/algorithms/string-algorithm/z-algorithm/tutorial/"}),"Hackerearth")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://ivanyu.me/blog/2013/10/15/z-algorithm/"}),"Z Algorithm by Ivan Yurchenko"))))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Pattern/ZAlgorithm.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-pattern-z-algorithm-mdx-11cfd81357cbfef9c3dd.js.map