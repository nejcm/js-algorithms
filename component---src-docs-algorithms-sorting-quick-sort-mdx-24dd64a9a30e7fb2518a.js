(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{"r/hS":function(e,t,r){"use strict";r.r(t),r.d(t,"_frontmatter",(function(){return o})),r.d(t,"default",(function(){return b}));r("5hJT"),r("W1QL"),r("K/PF"),r("t91x"),r("75LO"),r("PJhk"),r("mXGw");var a=r("/FXl"),n=r("TjRS");r("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Sorting/QuickSort.mdx"}});var c={_frontmatter:o},l=n.a;function b(e){var t=e.components,r=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,["components"]);return Object(a.b)(l,i({},c,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"quick-sort"},"Quick Sort"),Object(a.b)("p",null,"Quicksort (sometimes called partition-exchange sort) is an efficient sorting\nalgorithm. When implemented well, it can be about two or three times faster than\nits main competitors, merge sort and heapsort."),Object(a.b)("p",null,"Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot'\nelement from the array and partitioning the other elements into two sub-arrays,\naccording to whether they are less than or greater than the pivot. The\nsub-arrays are then sorted recursively. This can be done in-place, requiring\nsmall additional amounts of memory to perform the sorting."),Object(a.b)("p",null,'Quicksort is a comparison sort, meaning that it can sort items of any type for\nwhich a "less-than" relation (formally, a total order) is defined. Efficient\nimplementations of Quicksort are not a stable sort, meaning that the relative\norder of equal sort items is not preserved.'),Object(a.b)("p",null,"Animated visualization of the quicksort algorithm. The horizontal lines are\npivot values."),Object(a.b)("p",null,Object(a.b)("img",{alt:"Quicksort",src:"https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif"})),Object(a.b)("h2",{id:"complexity"},"Complexity"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",i({parentName:"tr"},{align:null}),"Name"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Best"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Average"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Worst"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Memory"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Stable"),Object(a.b)("th",i({parentName:"tr"},{align:"left"}),"Comments"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),"Quick sort"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"n"," ","log(n)"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"n"," ","log(n)"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"n",Object(a.b)("sup",null,"2")),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"log(n)"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"No"),Object(a.b)("td",i({parentName:"tr"},{align:"left"}),"Quicksort is usually done in-place with O(log(n)) stack space")))),Object(a.b)("h2",{id:"references"},"References"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.geeksforgeeks.org/quick-sort/"}),"Geeksforgeeks")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Quicksort"}),"Wikipedia")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.youtube.com/watch?v=SLauY6PpjW4"}),"YouTube")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.programiz.com/dsa/quick-sort"}),"Programiz")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"http://www.algomation.com/player?algorithm=58bb2ef75b2b830400b05118"}),"Algomation")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.hackerearth.com/practice/algorithms/sorting/quick-sort/tutorial/"}),"Hackerearth")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.tutorialspoint.com/data_structures_algorithms/quick_sort_algorithm.htm"}),"Tutorialspoint"))))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Sorting/QuickSort.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-sorting-quick-sort-mdx-24dd64a9a30e7fb2518a.js.map