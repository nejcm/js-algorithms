{"version":3,"sources":["webpack:///../src/docs/DataStructures/Tree.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","alt","src","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,QADR,QAGA,uNAGA,4UAIA,wuBAUA,qBAAG,mBAAKC,IAAI,+BAA+BC,IAAI,yEAC/C,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8DADQ,kBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,wDADQ,cAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gDADQ,YAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,wCADQ,cAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,+FADQ,gBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sFADQ,0B,gNAQ1BN,EAAWO,gBAAiB","file":"component---src-docs-data-structures-tree-mdx-f67a6f312788a5f019c4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/nejcm/js-algorithms/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tree\"\n    }}>{`Tree`}</h1>\n    <p>{`is a widely used abstract data type (ADT) that simulates a hierarchical tree\nstructure, with a root value and subtrees of children with a parent node,\nrepresented as a set of linked nodes.`}</p>\n    <p>{`A tree data structure can be defined recursively as a collection of nodes\n(starting at a root node), where each node is a data structure consisting of a\nvalue, together with a list of references to nodes (the \"children\"), with the\nconstraints that no reference is duplicated, and none points to the root.`}</p>\n    <p>{`Alternatively, a tree can be defined abstractly as a whole (globally) as an\nordered tree, with a value assigned to each node. Both these perspectives are\nuseful: while a tree can be analyzed mathematically as a whole, when actually\nrepresented as a data structure it is usually represented and worked with\nseparately by node (rather than as a set of nodes and an adjacency list of edges\nbetween nodes, as one may represent a digraph, for instance). For example,\nlooking at a tree as a whole, one can talk about \"the parent node\" of a given\nnode, but in general as a data structure a given node only contains the list of\nits children, but does not contain a reference to its parent (if any). (Source:\nWikipedia)`}</p>\n    <p><img alt=\"Data Structure Visualization\" src=\"https://upload.wikimedia.org/wikipedia/commons/f/f7/Binary_tree.svg\" /></p>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.geeksforgeeks.org/binary-tree-data-structure/\"\n        }}>{`Geeksforgeeks`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Tree_(data_structure)\"\n        }}>{`Wikipedia`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=oSWTXtMglKE\"\n        }}>{`YouTube`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.programiz.com/dsa/trees\"\n        }}>{`Programiz`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.hackerearth.com/practice/data-structures/trees/binary-and-nary-trees/tutorial/\"\n        }}>{`Hackerearth`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.tutorialspoint.com/data_structures_algorithms/tree_data_structure.htm\"\n        }}>{`Tutorialspoint`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}