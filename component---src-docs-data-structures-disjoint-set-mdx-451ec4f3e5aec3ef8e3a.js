(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{RgHN:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return u}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),i=n("TjRS");n("aD51");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/DataStructures/DisjointSet.mdx"}});var o={_frontmatter:s},c=i.a;function u(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(c,r({},o,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"disjoint-set"},"Disjoint-set"),Object(a.b)("p",null,"A disjoint-set data structure (also called a union–find data structure or\nmerge–find set) is a data structure that tracks a set of elements partitioned\ninto a number of disjoint (non-overlapping) subsets. It provides\nnear-constant-time operations (bounded by the inverse Ackermann function) to add\nnew sets, to merge existing sets, and to determine whether elements are in the\nsame set. In addition to many other uses (see the Applications section),\ndisjoint-sets play a key role in Kruskal's algorithm for finding the minimum\nspanning tree of a graph. (Source: Wikipedia)"),Object(a.b)("p",null,Object(a.b)("img",{alt:"disjoint set",src:"https://upload.wikimedia.org/wikipedia/commons/6/67/Dsu_disjoint_sets_init.svg"})),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"MakeSet")," creates 8 singletons."),Object(a.b)("p",null,Object(a.b)("img",{alt:"disjoint set",src:"https://upload.wikimedia.org/wikipedia/commons/a/ac/Dsu_disjoint_sets_final.svg"})),Object(a.b)("p",null,"After some operations of ",Object(a.b)("em",{parentName:"p"},"Union"),", some sets are grouped together."),Object(a.b)("h2",{id:"references"},"References"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://www.geeksforgeeks.org/disjoint-set-data-structures/"}),"Geeksforgeeks")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Disjoint-set_data_structure"}),"Wikipedia")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://www.youtube.com/watch?v=wU6udHRIkcc"}),"YouTube")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://www.programiz.com/dsa/stack"}),"Programiz")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://www.hackerearth.com/practice/data-structures/disjoint-data-strutures/basics-of-disjoint-data-structures/tutorial/"}),"Hackerearth"))))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/DataStructures/DisjointSet.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-data-structures-disjoint-set-mdx-451ec4f3e5aec3ef8e3a.js.map