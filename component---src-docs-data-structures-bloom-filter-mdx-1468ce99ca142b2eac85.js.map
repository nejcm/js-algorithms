{"version":3,"sources":["webpack:///../src/docs/DataStructures/BloomFilter.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","alt","src","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,yNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,kjBAOA,qBAAG,mBAAKC,IAAI,+BAA+BC,IAAI,2GAC/C,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,wFADQ,kBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,+CADQ,cAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gDADQ,YAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mFADQ,sB,uNAQ1BN,EAAWO,gBAAiB","file":"component---src-docs-data-structures-bloom-filter-mdx-1468ce99ca142b2eac85.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/nejcm/js-algorithms/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"bloom-filter\"\n    }}>{`Bloom filter`}</h1>\n    <p>{`A Bloom filter is a space-efficient probabilistic data structure, conceived by\nBurton Howard Bloom in 1970, that is used to test whether an element is a member\nof a set. False positive matches are possible, but false negatives are not â€“ in\nother words, a query returns either \"possibly in set\" or \"definitely not in\nset.\" Elements can be added to the set, but not removed (though this can be\naddressed with the counting Bloom filter variant); the more items added, the\nlarger the probability of false positives. (Source: Wikipedia)`}</p>\n    <p><img alt=\"Data Structure Visualization\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Bloom_filter.svg/360px-Bloom_filter.svg.png\" /></p>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/\"\n        }}>{`Geeksforgeeks`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Bloom_filter\"\n        }}>{`Wikipedia`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=bEmBh1HtYrw\"\n        }}>{`YouTube`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://hackernoon.com/probabilistic-data-structures-bloom-filter-5374112a7832\"\n        }}>{`Hackernoon`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}