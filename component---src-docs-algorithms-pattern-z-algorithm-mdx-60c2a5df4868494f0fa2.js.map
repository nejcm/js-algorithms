{"version":3,"sources":["webpack:///../src/docs/Algorithms/Pattern/ZAlgorithm.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,4NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,sEAAqD,0BAAYC,WAAW,KAAvB,KAArD,iCACF,0BAAYA,WAAW,KAAvB,KADE,mBAC+D,0BAAYA,WAAW,KAAvB,gBAD/D,KAEA,uCAAsB,0BAAYA,WAAW,KAAvB,KAAtB,cAAkF,0BAAYA,WAAW,KAAvB,KAAlF,sCAAsK,0BAAYA,WAAW,KAAvB,KAAtK,WACF,0BAAYA,WAAW,KAAvB,QADE,mDACkG,0BAAYA,WAAW,KAAvB,QADlG,+BAEQ,0BAAYA,WAAW,KAAvB,KAFR,aAEmE,0BAAYA,WAAW,KAAvB,KAFnE,wDAGF,0BAAYA,WAAW,KAAvB,KAHE,gCAG4E,0BAAYA,WAAW,KAAvB,KAH5E,0BAGoJ,0BAAYA,WAAW,KAAvB,KAHpJ,8DAI2C,0BAAYA,WAAW,KAAvB,KAJ3C,cAIuG,0BAAYA,WAAW,KAAvB,QAJvG,gFAMA,kCAAiB,0BAAYA,WAAW,KAAvB,KAAjB,mDAAkH,0BAAYA,WAAW,KAAvB,gBAAlH,qJAE4D,0BAAYA,WAAW,KAAvB,KAF5D,SAEmH,0BAAYA,WAAW,KAAvB,KAFnH,QAGF,0BAAYA,WAAW,KAAvB,SAHE,8BAG8E,0BAAYA,WAAW,KAAvB,UAH9E,wCAIF,0BAAYA,WAAW,KAAvB,KAJE,cAI0D,0BAAYA,WAAW,KAAvB,iBAJ1D,QAI4H,0BAAYA,WAAW,KAAvB,YAJ5H,gFAK8C,0BAAYA,WAAW,KAAvB,eAL9C,UAKgH,0BAAYA,WAAW,KAAvB,SALhH,4BAMiB,0BAAYA,WAAW,KAAvB,KANjB,QAMuE,0BAAYA,WAAW,KAAvB,KANvE,iBAMsI,0BAAYA,WAAW,KAAvB,WANtI,OAMiM,0BAAYA,WAAW,KAAvB,WANjM,0BAQA,iBAAQ,CACN,GAAM,cADR,cAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,iBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,WAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,SAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,SAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,cAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,eAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,KAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,SAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,eAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,KAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,aAKjB,wHAEA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uFADQ,kBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,2FADQ,gBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mDADQ,yC,0NAQ1BJ,EAAWK,gBAAiB","file":"component---src-docs-algorithms-pattern-z-algorithm-mdx-60c2a5df4868494f0fa2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/nejcm/js-algorithms/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"z-algorithm\"\n    }}>{`Z algorithm`}</h1>\n    <p>{`The Z-algorithm finds occurrences of a \"word\" `}<inlineCode parentName=\"p\">{`W`}</inlineCode>{` within a main \"text string\"\n`}<inlineCode parentName=\"p\">{`T`}</inlineCode>{` in linear time `}<inlineCode parentName=\"p\">{`O(|W| + |T|)`}</inlineCode>{`.`}</p>\n    <p>{`Given a string `}<inlineCode parentName=\"p\">{`S`}</inlineCode>{` of length `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{`, the algorithm produces an array, `}<inlineCode parentName=\"p\">{`Z`}</inlineCode>{` where\n`}<inlineCode parentName=\"p\">{`Z[i]`}</inlineCode>{` represents the longest substring starting from `}<inlineCode parentName=\"p\">{`S[i]`}</inlineCode>{` which is also a\nprefix of `}<inlineCode parentName=\"p\">{`S`}</inlineCode>{`. Finding `}<inlineCode parentName=\"p\">{`Z`}</inlineCode>{` for the string obtained by concatenating the word,\n`}<inlineCode parentName=\"p\">{`W`}</inlineCode>{` with a nonce character, say `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` followed by the text, `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{`, helps with\npattern matching, for if there is some index `}<inlineCode parentName=\"p\">{`i`}</inlineCode>{` such that `}<inlineCode parentName=\"p\">{`Z[i]`}</inlineCode>{` equals the\npattern length, then the pattern must be present at that point.`}</p>\n    <p>{`While the `}<inlineCode parentName=\"p\">{`Z`}</inlineCode>{` array can be computed with two nested loops in `}<inlineCode parentName=\"p\">{`O(|W| * |T|)`}</inlineCode>{`\ntime, the following strategy shows how to obtain it in linear time, based on the\nidea that as we iterate over the letters in the string (index `}<inlineCode parentName=\"p\">{`i`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` to\n`}<inlineCode parentName=\"p\">{`n - 1`}</inlineCode>{`), we maintain an interval `}<inlineCode parentName=\"p\">{`[L, R]`}</inlineCode>{` which is the interval with maximum\n`}<inlineCode parentName=\"p\">{`R`}</inlineCode>{` such that `}<inlineCode parentName=\"p\">{`1 ≤ L ≤ i ≤ R`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`S[L...R]`}</inlineCode>{` is a prefix that is also a\nsubstring (if no such interval exists, just let `}<inlineCode parentName=\"p\">{`L = R = - 1`}</inlineCode>{`). For `}<inlineCode parentName=\"p\">{`i = 1`}</inlineCode>{`, we\ncan simply compute `}<inlineCode parentName=\"p\">{`L`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`R`}</inlineCode>{` by comparing `}<inlineCode parentName=\"p\">{`S[0...]`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`S[1...]`}</inlineCode>{`. (Source:\nWikipedia)`}</p>\n    <h2 {...{\n      \"id\": \"complexity\"\n    }}>{`Complexity`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Preprocessing`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Average`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Worst`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Space`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Comments`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Z algorithm`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`m`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`n + m`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`n `}{`*`}{` m`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`m`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`*`}{` Where n = length of the source; m = length of the query pattern; k = size of\nthe Alphabet`}</p>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.geeksforgeeks.org/z-algorithm-linear-time-pattern-searching-algorithm/\"\n        }}>{`Geeksforgeeks`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.hackerearth.com/practice/algorithms/string-algorithm/z-algorithm/tutorial/\"\n        }}>{`Hackerearth`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://ivanyu.me/blog/2013/10/15/z-algorithm/\"\n        }}>{`Z Algorithm by Ivan Yurchenko`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}