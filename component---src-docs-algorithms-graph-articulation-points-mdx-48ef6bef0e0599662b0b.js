(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{Tqb5:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return b}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var r=n("/FXl"),a=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Graph/ArticulationPoints.mdx"}});var c={_frontmatter:o},l=a.a;function b(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(r.b)(l,i({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"articulation-points"},"Articulation points"),Object(r.b)("p",null,"A vertex in an undirected connected graph is an articulation point (or cut\nvertex) if removing it (and edges through it) disconnects the graph.\nArticulation points represent vulnerabilities in a connected network â€“ single\npoints whose failure would split the network into 2 or more components. They are\nuseful for designing reliable networks. For a disconnected undirected graph, an\narticulation point is a vertex removing which increases number of connected\ncomponents. ","[Source: Geeksforgeeks]"),Object(r.b)("h2",{id:"complexity"},"Complexity"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",i({parentName:"tr"},{align:"left"}),"Name"),Object(r.b)("th",i({parentName:"tr"},{align:"center"}),"Best time"),Object(r.b)("th",i({parentName:"tr"},{align:"left"}),"Comments"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",i({parentName:"tr"},{align:"left"}),"Articulation points"),Object(r.b)("td",i({parentName:"tr"},{align:"center"}),"v + e"),Object(r.b)("td",i({parentName:"tr"},{align:"left"}),"Based on the algorithm used.")))),Object(r.b)("p",null,"*"," Where v = number of vertices; e = number of edges"),Object(r.b)("h2",{id:"references"},"References"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.geeksforgeeks.org/articulation-points-or-cut-vertices-in-a-graph/"}),"Geeksforgeeks")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Biconnected_component"}),"Wikipedia")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.youtube.com/watch?v=jFZsDDB0-vo&ab_channel=AbdulBari"}),"YouTube")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.hackerearth.com/practice/algorithms/graphs/articulation-points-and-bridges/tutorial/"}),"Hackerearth")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://cp-algorithms.com/graph/cutpoints.html"}),"cp-algorithms"))))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Graph/ArticulationPoints.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-graph-articulation-points-mdx-48ef6bef0e0599662b0b.js.map