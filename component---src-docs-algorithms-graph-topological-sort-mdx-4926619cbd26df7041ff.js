(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{h4jD:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return i})),a.d(t,"default",(function(){return b}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("mXGw");var r=a("/FXl"),n=a("TjRS");a("aD51");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Graph/TopologicalSort.mdx"}});var l={_frontmatter:i},c=n.a;function b(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,["components"]);return Object(r.b)(c,o({},l,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"topological-sort"},"Topological sort"),Object(r.b)("p",null,"Or topological ordering of a directed graph is a linear ordering of its vertices\nsuch that for every directed edge uv from vertex u to vertex v, u comes before v\nin the ordering. For instance, the vertices of the graph may represent tasks to\nbe performed, and the edges may represent constraints that one task must be\nperformed before another; in this application, a topological ordering is just a\nvalid sequence for the tasks. A topological ordering is possible if and only if\nthe graph has no directed cycles, that is, if it is a directed acyclic graph\n(DAG). Any DAG has at least one topological ordering, and algorithms are known\nfor constructing a topological ordering of any DAG in linear time. ","[Source:\nWikipedia]"),Object(r.b)("p",null,Object(r.b)("img",{alt:"Topologic sorting",src:"https://upload.wikimedia.org/wikipedia/commons/0/03/Directed_acyclic_graph_2.svg"})),Object(r.b)("p",null,"The graph shown above has many valid topological sorts:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"5, 7, 3, 11, 8, 2, 9, 10")," (visual left-to-right, top-to-bottom)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"3, 5, 7, 8, 11, 2, 9, 10")," (smallest-numbered available vertex first)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"5, 7, 3, 8, 11, 10, 9, 2")," (fewest edges first)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"7, 5, 11, 3, 10, 8, 9, 2")," (largest-numbered available vertex first)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"5, 7, 11, 2, 3, 8, 9, 10")," (attempting top-to-bottom, left-to-right)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"3, 7, 8, 5, 11, 10, 2, 9")," (arbitrary)")),Object(r.b)("h2",{id:"complexity"},"Complexity"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",o({parentName:"tr"},{align:"left"}),"Name"),Object(r.b)("th",o({parentName:"tr"},{align:"center"}),"Best time"),Object(r.b)("th",o({parentName:"tr"},{align:"left"}),"Comments"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"left"}),"Topological sort"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"v + e"),Object(r.b)("td",o({parentName:"tr"},{align:"left"}),"Based on the algorithm used.")))),Object(r.b)("p",null,"*"," Where v = number of vertices; e = number of edges"),Object(r.b)("h2",{id:"references"},"References"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",o({parentName:"li"},{href:"https://www.geeksforgeeks.org/topological-sorting/"}),"Geeksforgeeks")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",o({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Topological_sorting"}),"Wikipedia")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",o({parentName:"li"},{href:"https://www.hackerearth.com/practice/algorithms/graphs/topological-sort/tutorial/"}),"Hackerearth"))))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Graph/TopologicalSort.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-graph-topological-sort-mdx-4926619cbd26df7041ff.js.map