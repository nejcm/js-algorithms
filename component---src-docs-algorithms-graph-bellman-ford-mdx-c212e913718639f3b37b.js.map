{"version":3,"sources":["webpack:///../src/docs/Algorithms/Graph/BellmanFord.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","alt","src","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,2NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,wUAIA,0eAMA,k9BAYA,qBAAG,mBAAKC,IAAI,eAAeC,IAAI,mGAC/B,iBAAQ,CACN,GAAM,cADR,cAGA,yBACE,qBAAOC,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,cAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,aAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,cAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,gBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,eAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,KAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,aAKjB,+EACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gEADQ,kBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iEADQ,cAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qEADQ,YAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,yDADQ,cAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sDADQ,kBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,6EADQ,0B,yNAQ1BN,EAAWO,gBAAiB","file":"component---src-docs-algorithms-graph-bellman-ford-mdx-c212e913718639f3b37b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/nejcm/js-algorithms/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"bellman-ford\"\n    }}>{`Bellman ford`}</h1>\n    <p>{`It is an algorithm that computes shortest paths from a single source vertex to\nall of the other vertices in a weighted digraph. It is slower than Dijkstra's\nalgorithm for the same problem, but more versatile, as it is capable of handling\ngraphs in which some of the edge weights are negative numbers.`}</p>\n    <p>{`Negative edge weights are found in various applications of graphs, hence the\nusefulness of this algorithm. If a graph contains a \"negative cycle\" (i.e. a\ncycle whose edges sum to a negative value) that is reachable from the source,\nthen there is no cheapest path: any path that has a point on the negative cycle\ncan be made cheaper by one more walk around the negative cycle. In such a case,\nthe Bellman–Ford algorithm can detect and report the negative cycle.`}</p>\n    <p>{`Like Dijkstra's algorithm, Bellman–Ford proceeds by relaxation, in which\napproximations to the correct distance are replaced by better ones until they\neventually reach the solution. In both algorithms, the approximate distance to\neach vertex is always an overestimate of the true distance, and is replaced by\nthe minimum of its old value and the length of a newly found path. However,\nDijkstra's algorithm uses a priority queue to greedily select the closest vertex\nthat has not yet been processed, and performs this relaxation process on all of\nits outgoing edges; by contrast, the Bellman–Ford algorithm simply relaxes all\nthe edges. In each of these repetitions, the number of vertices with correctly\ncalculated distances grows, from which it follows that eventually all vertices\nwill have their correct distances. This method allows the Bellman–Ford algorithm\nto be applied to a wider class of inputs than Dijkstra. `}{`[Source: Wikipedia]`}</p>\n    <p><img alt=\"Bellman-Ford\" src=\"https://upload.wikimedia.org/wikipedia/commons/2/2e/Shortest_path_Dijkstra_vs_BellmanFord.gif\" /></p>\n    <h2 {...{\n      \"id\": \"complexity\"\n    }}>{`Complexity`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Worst time`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Best time`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Comments`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Bellman ford`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`v `}{`*`}{` e`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`e`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`*`}{` Where v = number of vertices; e = number of edges`}</p>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.geeksforgeeks.org/bellman-ford-algorithm-dp-23/\"\n        }}>{`Geeksforgeeks`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm\"\n        }}>{`Wikipedia`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=FtN3BYH2Zes&ab_channel=AbdulBari\"\n        }}>{`YouTube`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.programiz.com/dsa/bellman-ford-algorithm\"\n        }}>{`Programiz`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://cp-algorithms.com/graph/bellman_ford.html\"\n        }}>{`cp-algorithms`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.tutorialspoint.com/Bellman-Ford-Algorithm-for-Shortest-Paths\"\n        }}>{`Tutorialspoint`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}