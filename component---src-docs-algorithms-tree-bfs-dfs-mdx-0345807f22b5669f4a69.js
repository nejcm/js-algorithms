(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{pZq7:function(e,t,r){"use strict";r.r(t),r.d(t,"_frontmatter",(function(){return n})),r.d(t,"default",(function(){return h}));r("5hJT"),r("W1QL"),r("K/PF"),r("t91x"),r("75LO"),r("PJhk"),r("mXGw");var a=r("/FXl"),s=r("TjRS");r("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e}).apply(this,arguments)}var n={};void 0!==n&&n&&n===Object(n)&&Object.isExtensible(n)&&!n.hasOwnProperty("__filemeta")&&Object.defineProperty(n,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Tree/BFS&DFS.mdx"}});var o={_frontmatter:n},c=s.a;function h(e){var t=e.components,r=function(e,t){if(null==e)return{};var r,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,["components"]);return Object(a.b)(c,i({},o,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"bfs--dfs"},"BFS & DFS"),Object(a.b)("h2",{id:"breadth-first-search"},"Breadth first search"),Object(a.b)("p",null,"BFS (level order traversal) is a vertex based technique for finding a shortest\npath in tree. It uses a Queue data structure which follows first in first out.\nIn BFS, one node is selected at a time when it is visited and marked then its\nadjacent are visited and stored in the queue. It is slower than DFS. ","[Source:\nGeeksforgeeks]"),Object(a.b)("p",null,"It starts traversing from a selected node (source or starting node) and traverse\nthe tree layerwise thus exploring the neighbour nodes (nodes which are directly\nconnected to source node). You must then move towards the next-level neighbour\nnodes."),Object(a.b)("h2",{id:"depth-first-search"},"Depth first search"),Object(a.b)("p",null,"DFS is a edge based technique. It uses the Stack data structure, performs two\nstages, first visited nodes are pushed into stack and second if there is no node\nthen visited nodes are popped."),Object(a.b)("p",null,"The DFS algorithm is a recursive algorithm that uses the idea of backtracking.\nIt involves exhaustive searches of all the nodes by going ahead, if possible,\nelse by backtracking."),Object(a.b)("h2",{id:"references"},"References"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.geeksforgeeks.org/difference-between-bfs-and-dfs/"}),"Geeksforgeeks")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.youtube.com/watch?v=pcKY4hjDrxk"}),"YouTube"))),Object(a.b)("h3",{id:"bfs"},"BFS"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/"}),"Geeksforgeeks")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Breadth-first_search"}),"Wikipedia")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.hackerearth.com/practice/algorithms/graphs/breadth-first-search/tutorial/"}),"Hackerearth")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.tutorialspoint.com/data_structures_algorithms/breadth_first_traversal.htm"}),"Tutorialspoint"))),Object(a.b)("h3",{id:"dfs"},"DFS"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.geeksforgeeks.org/depth-first-search-or-dfs-for-a-graph/"}),"Geeksforgeeks")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Depth-first_search"}),"Wikipedia")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.hackerearth.com/practice/algorithms/graphs/depth-first-search/tutorial/"}),"Hackerearth")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.tutorialspoint.com/data_structures_algorithms/depth_first_traversal.htm"}),"Tutorialspoint"))))}void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Tree/BFS&DFS.mdx"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-tree-bfs-dfs-mdx-0345807f22b5669f4a69.js.map