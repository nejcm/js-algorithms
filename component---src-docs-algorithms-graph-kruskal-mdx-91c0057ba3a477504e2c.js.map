{"version":3,"sources":["webpack:///../src/docs/Algorithms/Graph/Kruskal.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","alt","src","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,uNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,ynBAOA,qBAAG,mBAAKC,IAAI,oBAAoBC,IAAI,2GACpC,iBAAQ,CACN,GAAM,cADR,cAGA,yBACE,qBAAOC,WAAW,SAChB,kBAAIA,WAAW,SACb,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,WADX,aAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,cAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,WAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,WADX,oBAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,aAKjB,+EACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,0FADQ,kBAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,wDADQ,cAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,4EADQ,YAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,oDADQ,cAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,qDADQ,yB,qNAQ1BN,EAAWO,gBAAiB","file":"component---src-docs-algorithms-graph-kruskal-mdx-91c0057ba3a477504e2c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/js-algorithms/js-algorithms/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"kruskal\"\n    }}>{`Kruskal`}</h1>\n    <p>{`Kruskal's algorithm is a minimum-spanning-tree algorithm which finds an edge of the least\npossible weight that connects any two trees in the forest. It is a greedy algorithm in\ngraph theory as it finds a minimum spanning tree for a connected weighted graph adding\nincreasing cost arcs at each step. This means it finds a subset of the edges that forms a\ntree that includes every vertex, where the total weight of all the edges in the tree is\nminimized. If the graph is not connected, then it finds a minimum spanning forest (a\nminimum spanning tree for each connected component). `}{`[Source: Wikipedia]`}</p>\n    <p><img alt=\"Kruskal Algorithm\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/MST_kruskal_en.gif/600px-MST_kruskal_en.gif\" /></p>\n    <h2 {...{\n      \"id\": \"complexity\"\n    }}>{`Complexity`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Best time`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Comments`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Kruskal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`v `}{`*`}{` log(v)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`*`}{` Where v = number of vertices; e = number of edges`}</p>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.geeksforgeeks.org/kruskals-minimum-spanning-tree-algorithm-greedy-algo-2/\"\n        }}>{`Geeksforgeeks`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\"\n        }}>{`Wikipedia`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=4ZlRH0eK-qQ&t=700s&ab_channel=AbdulBari\"\n        }}>{`YouTube`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.programiz.com/dsa/kruskal-algorithm\"\n        }}>{`Programiz`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://cp-algorithms.com/graph/mst_kruskal.html\"\n        }}>{`cp-algorithms`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}