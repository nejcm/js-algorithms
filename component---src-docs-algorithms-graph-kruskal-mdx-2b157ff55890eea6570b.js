(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{oQLy:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return l})),a.d(t,"default",(function(){return c}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("mXGw");var n=a("/FXl"),r=a("TjRS");a("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Graph/Kruskal.mdx"}});var s={_frontmatter:l},o=r.a;function c(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(n.b)(o,i({},s,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"kruskal"},"Kruskal"),Object(n.b)("p",null,"Kruskal's algorithm is a minimum-spanning-tree algorithm which finds an edge of\nthe least possible weight that connects any two trees in the forest. It is a\ngreedy algorithm in graph theory as it finds a minimum spanning tree for a\nconnected weighted graph adding increasing cost arcs at each step. This means it\nfinds a subset of the edges that forms a tree that includes every vertex, where\nthe total weight of all the edges in the tree is minimized. If the graph is not\nconnected, then it finds a minimum spanning forest (a minimum spanning tree for\neach connected component). ","[Source: Wikipedia]"),Object(n.b)("p",null,Object(n.b)("img",{alt:"Kruskal Algorithm",src:"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/MST_kruskal_en.gif/600px-MST_kruskal_en.gif"})),Object(n.b)("h2",{id:"complexity"},"Complexity"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",i({parentName:"tr"},{align:"left"}),"Name"),Object(n.b)("th",i({parentName:"tr"},{align:"center"}),"Best time"),Object(n.b)("th",i({parentName:"tr"},{align:"left"}),"Comments"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:"left"}),"Kruskal"),Object(n.b)("td",i({parentName:"tr"},{align:"center"}),"v ","*"," log(v)"),Object(n.b)("td",i({parentName:"tr"},{align:"left"}))))),Object(n.b)("p",null,"*"," Where v = number of vertices; e = number of edges"),Object(n.b)("h2",{id:"references"},"References"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://www.geeksforgeeks.org/kruskals-minimum-spanning-tree-algorithm-greedy-algo-2/"}),"Geeksforgeeks")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Kruskal%27s_algorithm"}),"Wikipedia")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://www.youtube.com/watch?v=4ZlRH0eK-qQ&t=700s&ab_channel=AbdulBari"}),"YouTube")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://www.programiz.com/dsa/kruskal-algorithm"}),"Programiz")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://cp-algorithms.com/graph/mst_kruskal.html"}),"cp-algorithms"))))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Graph/Kruskal.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-graph-kruskal-mdx-2b157ff55890eea6570b.js.map