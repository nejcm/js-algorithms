(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{conN:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return o})),a.d(t,"default",(function(){return l}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("mXGw");var r=a("/FXl"),n=a("TjRS");a("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Graph/Dijkstra.mdx"}});var s={_frontmatter:o},b=n.a;function l(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,["components"]);return Object(r.b)(b,i({},s,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"dijkstra"},"Dijkstra"),Object(r.b)("p",null,"Dijkstra's algorithm is an algorithm for finding the shortest paths between\nnodes in a graph, which may represent, for example, road networks. It was\nconceived by computer scientist Edsger W. Dijkstra in 1956 and published three\nyears later."),Object(r.b)("p",null,'The algorithm exists in many variants. Dijkstra\'s original algorithm found the\nshortest path between two given nodes, but a more common variant fixes a single\nnode as the "source" node and finds shortest paths from the source to all other\nnodes in the graph, producing a shortest-path tree.'),Object(r.b)("p",null,"For a given source node in the graph, the algorithm finds the shortest path\nbetween that node and every other. It can also be used for finding the shortest\npaths from a single node to a single destination node by stopping the algorithm\nonce the shortest path to the destination node has been determined. For example,\nif the nodes of the graph represent cities and edge path costs represent driving\ndistances between pairs of cities connected by a direct road (for simplicity,\nignore red lights, stop signs, toll roads and other obstructions), Dijkstra's\nalgorithm can be used to find the shortest route between one city and all other\ncities. ","[Source: Wikipedia]"),Object(r.b)("p",null,Object(r.b)("img",{alt:"Dijkstra",src:"https://upload.wikimedia.org/wikipedia/commons/5/57/Dijkstra_Animation.gif"})),Object(r.b)("h2",{id:"complexity"},"Complexity"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",i({parentName:"tr"},{align:"left"}),"Name"),Object(r.b)("th",i({parentName:"tr"},{align:"center"}),"Worst time"),Object(r.b)("th",i({parentName:"tr"},{align:"left"}),"Comments"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",i({parentName:"tr"},{align:"left"}),"Dijkstra"),Object(r.b)("td",i({parentName:"tr"},{align:"center"}),"e + v ","*"," log(v)"),Object(r.b)("td",i({parentName:"tr"},{align:"left"}),"Using fibonacci heap min-priority queue")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",i({parentName:"tr"},{align:"left"}),"Dijkstra"),Object(r.b)("td",i({parentName:"tr"},{align:"center"}),"v",Object(r.b)("sup",null,"2")),Object(r.b)("td",i({parentName:"tr"},{align:"left"}),"Using an array")))),Object(r.b)("p",null,"*"," Where v = number of vertices; e = number of edges"),Object(r.b)("h2",{id:"references"},"References"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/"}),"Geeksforgeeks")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"}),"Wikipedia")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.youtube.com/watch?v=XB4MIexjvY0&ab_channel=AbdulBari"}),"YouTube")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.programiz.com/dsa/dijkstra-algorithm"}),"Programiz")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://cp-algorithms.com/graph/dijkstra.html"}),"cp-algorithms"))))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Graph/Dijkstra.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-graph-dijkstra-mdx-12cdaad001c3320eae3c.js.map