(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{XDDA:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return o})),a.d(t,"default",(function(){return l}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("mXGw");var r=a("/FXl"),n=a("TjRS");a("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/DataStructures/Tree.mdx"}});var s={_frontmatter:o},c=n.a;function l(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,["components"]);return Object(r.b)(c,i({},s,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"tree"},"Tree"),Object(r.b)("p",null,"is a widely used abstract data type (ADT) that simulates a hierarchical tree\nstructure, with a root value and subtrees of children with a parent node,\nrepresented as a set of linked nodes."),Object(r.b)("p",null,'A tree data structure can be defined recursively as a collection of nodes\n(starting at a root node), where each node is a data structure consisting of a\nvalue, together with a list of references to nodes (the "children"), with the\nconstraints that no reference is duplicated, and none points to the root.'),Object(r.b)("p",null,'Alternatively, a tree can be defined abstractly as a whole (globally) as an\nordered tree, with a value assigned to each node. Both these perspectives are\nuseful: while a tree can be analyzed mathematically as a whole, when actually\nrepresented as a data structure it is usually represented and worked with\nseparately by node (rather than as a set of nodes and an adjacency list of edges\nbetween nodes, as one may represent a digraph, for instance). For example,\nlooking at a tree as a whole, one can talk about "the parent node" of a given\nnode, but in general as a data structure a given node only contains the list of\nits children, but does not contain a reference to its parent (if any). (Source:\nWikipedia)'),Object(r.b)("p",null,Object(r.b)("img",{alt:"Data Structure Visualization",src:"https://upload.wikimedia.org/wikipedia/commons/f/f7/Binary_tree.svg"})),Object(r.b)("h2",{id:"references"},"References"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.geeksforgeeks.org/binary-tree-data-structure/"}),"Geeksforgeeks")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Tree_(data_structure)"}),"Wikipedia")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.youtube.com/watch?v=oSWTXtMglKE"}),"YouTube")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.programiz.com/dsa/trees"}),"Programiz")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.hackerearth.com/practice/data-structures/trees/binary-and-nary-trees/tutorial/"}),"Hackerearth")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.tutorialspoint.com/data_structures_algorithms/tree_data_structure.htm"}),"Tutorialspoint"))))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/DataStructures/Tree.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-data-structures-tree-mdx-eb0e785071c1579a47c1.js.map