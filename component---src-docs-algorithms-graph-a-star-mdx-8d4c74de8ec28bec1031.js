(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{QlmP:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return i})),a.d(t,"default",(function(){return s}));var r=a("Fcif"),n=a("+I+c"),b=(a("mXGw"),a("/FXl")),c=a("TjRS"),i=(a("aD51"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Graph/AStar.mdx"}});var l={_frontmatter:i},o=c.a;function s(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(b.b)(o,Object(r.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"a"},"A","*"),Object(b.b)("p",null,"Is a graph traversal and path search algorithm, which is often used in many fields of\ncomputer science due to its completeness, optimality, and optimal efficiency. One major\npractical drawback is its O(b^d) space complexity, as it stores all generated nodes in\nmemory. Thus, in practical travel-routing systems, it is generally outperformed by\nalgorithms which can pre-process the graph to attain better performance, as well as\nmemory-bounded approaches; however, A","*"," is still the best solution in many cases. A","*","\nachieves better performance by using heuristics to guide its search. ","[Source: Wikipedia]"),Object(b.b)("p",null,Object(b.b)("img",{alt:"A star",src:"https://upload.wikimedia.org/wikipedia/commons/9/98/AstarExampleEn.gif"})),Object(b.b)("h2",{id:"complexity"},"Complexity"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Name"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Best time"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Space"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Comments"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"A","*"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"b",Object(b.b)("sup",null,"d")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"b",Object(b.b)("sup",null,"d")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"A","*"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"v + e"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"v + e"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Same as above")))),Object(b.b)("p",null,"*"," Where v = number of visited vertices; e = number of visited edges",Object(b.b)("br",{parentName:"p"}),"\n","*"," Where b = branching factor of the tree/graph, d = depth of the goal node."),Object(b.b)("h2",{id:"references"},"References"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.geeksforgeeks.org/a-search-algorithm/"}),"Geeksforgeeks")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(r.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/A*_search_algorithm"}),"Wikipedia")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=vP5TkF0xJgI&ab_channel=GeeksforGeeks"}),"YouTube"))))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Graph/AStar.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-graph-a-star-mdx-8d4c74de8ec28bec1031.js.map