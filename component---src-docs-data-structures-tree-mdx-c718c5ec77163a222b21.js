(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{XDDA:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return s})),a.d(t,"default",(function(){return b}));var r=a("Fcif"),n=a("+I+c"),i=(a("mXGw"),a("/FXl")),o=a("TjRS"),s=(a("aD51"),{});void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/DataStructures/Tree.mdx"}});var l={_frontmatter:s},c=o.a;function b(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)(c,Object(r.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"tree"},"Tree"),Object(i.b)("p",null,"is a widely used abstract data type (ADT) that simulates a hierarchical tree structure,\nwith a root value and subtrees of children with a parent node, represented as a set of\nlinked nodes."),Object(i.b)("p",null,'A tree data structure can be defined recursively as a collection of nodes (starting at a\nroot node), where each node is a data structure consisting of a value, together with a\nlist of references to nodes (the "children"), with the constraints that no reference is\nduplicated, and none points to the root.'),Object(i.b)("p",null,'Alternatively, a tree can be defined abstractly as a whole (globally) as an ordered tree,\nwith a value assigned to each node. Both these perspectives are useful: while a tree can\nbe analyzed mathematically as a whole, when actually represented as a data structure it is\nusually represented and worked with separately by node (rather than as a set of nodes and\nan adjacency list of edges between nodes, as one may represent a digraph, for instance).\nFor example, looking at a tree as a whole, one can talk about "the parent node" of a given\nnode, but in general as a data structure a given node only contains the list of its\nchildren, but does not contain a reference to its parent (if any). (Source: Wikipedia)'),Object(i.b)("h3",{id:"some-tree-types"},"Some tree types:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Binary Tree"),": This is the most basic basic from of tree structure. Where each node\ncan have utmost two children. A perfect binary tree is a binary tree in which all\ninterior nodes have two children and all leaves have the same depth or same level. A\nfull binary tree (sometimes referred to as a proper or plane binary tree) is a tree in\nwhich every node in the tree has either 0 or 2 children. In a complete binary tree\nevery level, except possibly the last, is completely filled, and all nodes in the last\nlevel are as far left as possible. In the infinite complete binary tree, every node has\ntwo children."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Binary search tree"),": BST is a binary tree with certain properties such as , and left\nchild of the given node contains value less than equal to the given node and right hand\nchild contain node greater than the given node."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"AVL tree or height balanced binary tree"),": It is a variation of the Binary tree where\nheight difference between left and right sub tree can be at most 1. If at any time they\ndiffer by more than one, rebalancing is done to restore this property. Lookup,\ninsertion, and deletion all take O(log n) time in both the average and worst cases,\nwhere n is the number of nodes in the tree prior to the operation."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Red-Black tree"),": Another variant of binary tree similar to AVL tree it is a self\nbalancing binary search tree. In this tree nodes are either colored red or black."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Splay tree"),": A splay tree is a self-adjusting binary search tree with the additional\nproperty that recently accessed elements are quick to access again. All normal\noperations on a binary search tree are combined with one basic operation, called\nsplaying. Splaying the tree for a certain element rearranges the tree so that the\nelement is placed at the root of the tree."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"N-ary tree"),": In this tree the limitation of the binary tree is removed. Here a node\ncan have at most n children. Like binary tree it can be full,complete or perfect n-ary\ntree. N-ary is some time known as forest."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Fenwick tree"),": Is a binary indexed tree is a data structure that can efficiently\nupdate elements and calculate prefix sums in a table of numbers."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Trie Structure"),": In computer science, a trie, also called digital tree and sometimes\nradix tree or prefix tree (as they can be searched by prefixes), is an ordered tree\ndata structure that is used to store a dynamic set or associative array where the keys\nare usually strings. All the descendants of a node have a common prefix of the string\nassociated with that node, and the root is associated with the empty string."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Suffix tree"),": Trie and suffix tree are closely related. a suffix tree (also called\nPAT tree or, in an earlier form, position tree) is a compressed trie containing all the\nsuffixes of the given text as their keys and positions in the text as their values.\nSuffix trees allow particularly fast implementations of many important string\noperations."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Huffman Tree"),": Huffman tree is a frequency sorted binary tree used widely in\ncompressing data. Huffman tree is constructed to allocate a short code word to a long\ntext based on its frequency of occurrences."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Heap Structure"),": Heap structure is another widely used tree structure with a\nspecific ordering property. There are two types of heap - Min heap and Max heap. In a\nmin heap the parent of a node must be smaller than the values of all its children.\nSimilarly in max heap the parent always have greater value compared to all its\nchildren. One common implementation of heap is Binary heap where each parent can have\nat most two children.")),Object(i.b)("p",null,Object(i.b)("img",{alt:"Data Structure Visualization",src:"https://upload.wikimedia.org/wikipedia/commons/f/f7/Binary_tree.svg"})),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Operation"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Best Case Complexity"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Average Case Complexity"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Worst Case Complexity"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Search"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"O(log n)"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"O(log n)"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"O(n)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Insertion"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"O(log n)"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"O(log n)"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"O(n)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Deletion"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"O(log n)"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"O(log n)"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"O(n)")))),Object(i.b)("h2",{id:"references"},"References"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.geeksforgeeks.org/binary-tree-data-structure/"}),"Geeksforgeeks")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Tree_(data_structure)"}),"Wikipedia")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=oSWTXtMglKE"}),"YouTube")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.programiz.com/dsa/trees"}),"Programiz")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.hackerearth.com/practice/data-structures/trees/binary-and-nary-trees/tutorial/"}),"Hackerearth")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.tutorialspoint.com/data_structures_algorithms/tree_data_structure.htm"}),"Tutorialspoint"))))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/DataStructures/Tree.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-data-structures-tree-mdx-c718c5ec77163a222b21.js.map