(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{M4AC:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return c}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),i=n("TjRS");n("aD51");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/DataStructures/LinkedList.mdx"}});var l={_frontmatter:s},o=i.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(o,r({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"linked-list"},"Linked list"),Object(a.b)("p",null,"Is a linear collection of data elements, whose order is not given by their\nphysical placement in memory. Instead, each element points to the next. It is a\ndata structure consisting of a collection of nodes which together represent a\nsequence. In its most basic form, each node contains: data, and a reference (in\nother words, a link) to the next node in the sequence. This structure allows for\nefficient insertion or removal of elements from any position in the sequence\nduring iteration. More complex variants add additional links, allowing more\nefficient insertion or removal of nodes at arbitrary positions. A drawback of\nlinked lists is that access time is linear (and difficult to pipeline). Faster\naccess, such as random access, is not feasible. Arrays have better cache\nlocality compared to linked lists."),Object(a.b)("p",null,"Linked lists are among the simplest and most common data structures. They can be\nused to implement several other common abstract data types, including lists,\nstacks, queues, associative arrays, and S-expressions, though it is not uncommon\nto implement those data structures directly without using a linked list as the\nbasis."),Object(a.b)("p",null,"Disadvantages:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"They use more memory than arrays because of the storage used by their\npointers."),Object(a.b)("li",{parentName:"ul"},"Nodes in a linked list must be read in order from the beginning as linked\nlists are inherently sequential access."),Object(a.b)("li",{parentName:"ul"},"Nodes are stored noncontiguously, greatly increasing the time periods required\nto access individual elements within the list, especially with a CPU cache."),Object(a.b)("li",{parentName:"ul"},"Difficulties arise in linked lists when it comes to reverse traversing. For\ninstance, singly-linked lists are cumbersome to navigate backward ","[1]"," and\nwhile doubly linked lists are somewhat easier to read, memory is consumed in\nallocating space for a back-pointer.")),Object(a.b)("p",null,"(Source: Wikipedia)"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Data Structure Visualization",src:"https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2013/03/Linkedlist.png"})),Object(a.b)("h2",{id:"complexity"},"Complexity"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",r({parentName:"tr"},{align:"center"}),"Access"),Object(a.b)("th",r({parentName:"tr"},{align:"center"}),"Search"),Object(a.b)("th",r({parentName:"tr"},{align:"center"}),"Insertion"),Object(a.b)("th",r({parentName:"tr"},{align:"center"}),"Deletion"),Object(a.b)("th",r({parentName:"tr"},{align:"left"}),"Comments"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"O(n)"),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"O(n)"),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"O(1)"),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"O(n)"),Object(a.b)("td",r({parentName:"tr"},{align:"left"}))))),Object(a.b)("h2",{id:"references"},"References"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://www.geeksforgeeks.org/data-structures/linked-list/"}),"Geeksforgeeks")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Linked_list"}),"Wikipedia")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://www.youtube.com/watch?v=njTh_OwMljA"}),"YouTube")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://www.programiz.com/dsa/linked-list"}),"Programiz")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://www.hackerearth.com/practice/data-structures/linked-list/singly-linked-list/tutorial/"}),"Hackerearth")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://www.tutorialspoint.com/data_structures_algorithms/linked_list_algorithms.htm"}),"Tutorialspoint"))))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/DataStructures/LinkedList.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-data-structures-linked-list-mdx-6551fd2e2013e0d9ffdf.js.map