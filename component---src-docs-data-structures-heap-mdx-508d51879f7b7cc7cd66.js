(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{"9uFT":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return b})),a.d(t,"default",(function(){return c}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("mXGw");var n=a("/FXl"),r=a("TjRS");a("aD51");function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/DataStructures/Heap.mdx"}});var i={_frontmatter:b},p=r.a;function c(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(n.b)(p,l({},i,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"heap"},"Heap"),Object(n.b)("p",null,'Is a specialized tree-based data structure which is essentially an almost\ncomplete tree that satisfies the heap property: in a max heap, for any given\nnode C, if P is a parent node of C, then the key (the value) of P is greater\nthan or equal to the key of C. In a min heap, the key of P is less than or equal\nto the key of C. The node at the "top" of the heap (with no parents) is called\nthe root node.'),Object(n.b)("p",null,'The heap is one maximally efficient implementation of an abstract data type\ncalled a priority queue, and in fact, priority queues are often referred to as\n"heaps", regardless of how they may be implemented. In a heap, the highest (or\nlowest) priority element is always stored at the root. However, a heap is not a\nsorted structure; it can be regarded as being partially ordered. A heap is a\nuseful data structure when it is necessary to repeatedly remove the object with\nthe highest (or lowest) priority.'),Object(n.b)("p",null,"A common implementation of a heap is the binary heap, in which the tree is a\nbinary tree (see figure). The heap data structure, specifically the binary heap,\nwas introduced by J. W. J. Williams in 1964, as a data structure for the\nheapsort sorting algorithm. Heaps are also crucial in several efficient graph\nalgorithms such as Dijkstra's algorithm. When a heap is a complete binary tree,\nit has a smallest possible height—a heap with N nodes and for each node a\nbranches always has loga N height. (Source: Wikipedia)"),Object(n.b)("p",null,Object(n.b)("img",{alt:"Heap Visualization",src:"https://www.geeksforgeeks.org/wp-content/uploads/MinHeapAndMaxHeap.png"})),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Types of heaps:")),Object(n.b)("p",null,"There are several different types of heaps, each with a different implementation\nand various advantages and disadvantages. However, each heap type satisfies the\nheap property and can be used for the same types of tasks."),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",l({parentName:"tr"},{align:null}),"Operation"),Object(n.b)("th",l({parentName:"tr"},{align:null}),"find-min"),Object(n.b)("th",l({parentName:"tr"},{align:null}),"delete-min"),Object(n.b)("th",l({parentName:"tr"},{align:null}),"insert"),Object(n.b)("th",l({parentName:"tr"},{align:null}),"decrease-key"),Object(n.b)("th",l({parentName:"tr"},{align:null}),"meld"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",l({parentName:"tr"},{align:null}),"Binary"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(log n)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"O(log n)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"O(log n)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(n)")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",l({parentName:"tr"},{align:null}),"Leftist"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(log n)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(log n)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"O(log n)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(log n)")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",l({parentName:"tr"},{align:null}),"Binomial"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(log n)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)","*"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(log n)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"O(log n)")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",l({parentName:"tr"},{align:null}),"Fibonacci"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"O(log n)","*"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)","*"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",l({parentName:"tr"},{align:null}),"Pairing"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"O(log n)","*"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"o(log n)","*"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",l({parentName:"tr"},{align:null}),"Brodal"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"O(log n)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",l({parentName:"tr"},{align:null}),"Rank-pairing"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"O(log n)","*"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)","*"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",l({parentName:"tr"},{align:null}),"Strict Fibonacci"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"O(log n)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",l({parentName:"tr"},{align:null}),"2-3 heap"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"O(log n)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"O(log n)","*"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"O(log n)","*"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"Θ(1)"),Object(n.b)("td",l({parentName:"tr"},{align:null}),"?")))),Object(n.b)("p",null,"*"," Amortized time"),Object(n.b)("h2",{id:"references"},"References"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://www.geeksforgeeks.org/heap-data-structure/"}),"Geeksforgeeks")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Heap_(data_structure)"}),"Wikipedia")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://www.youtube.com/watch?v=t0Cq6tVNRBA"}),"YouTube")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://www.programiz.com/dsa/heap-data-structure"}),"Programiz")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://www.hackerearth.com/practice/data-structures/trees/heapspriority-queues/tutorial/"}),"Hackerearth")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://www.tutorialspoint.com/data_structures_algorithms/heap_data_structure.htm"}),"Tutorialspoint"))))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/DataStructures/Heap.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-data-structures-heap-mdx-508d51879f7b7cc7cd66.js.map