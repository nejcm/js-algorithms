(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{QlmP:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return b})),a.d(t,"default",(function(){return l}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("mXGw");var r=a("/FXl"),n=a("TjRS");a("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Graph/AStar.mdx"}});var c={_frontmatter:b},o=n.a;function l(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,["components"]);return Object(r.b)(o,i({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"a"},"A","*"),Object(r.b)("p",null,"is a graph traversal and path search algorithm, which is often used in many\nfields of computer science due to its completeness, optimality, and optimal\nefficiency. One major practical drawback is its O(b^d) space complexity, as it\nstores all generated nodes in memory. Thus, in practical travel-routing systems,\nit is generally outperformed by algorithms which can pre-process the graph to\nattain better performance, as well as memory-bounded approaches; however, A","*"," is\nstill the best solution in many cases. A","*"," achieves better performance by using\nheuristics to guide its search. ","[Source: Wikipedia]"),Object(r.b)("p",null,Object(r.b)("img",{alt:"A star",src:"https://upload.wikimedia.org/wikipedia/commons/9/98/AstarExampleEn.gif"})),Object(r.b)("h2",{id:"complexity"},"Complexity"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",i({parentName:"tr"},{align:"left"}),"Name"),Object(r.b)("th",i({parentName:"tr"},{align:"center"}),"Best time"),Object(r.b)("th",i({parentName:"tr"},{align:"center"}),"Space"),Object(r.b)("th",i({parentName:"tr"},{align:"left"}),"Comments"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",i({parentName:"tr"},{align:"left"}),"A","*"),Object(r.b)("td",i({parentName:"tr"},{align:"center"}),"b",Object(r.b)("sup",null,"d")," ",Object(r.b)("br",null)," v + e"),Object(r.b)("td",i({parentName:"tr"},{align:"center"}),"b",Object(r.b)("sup",null,"d")," ",Object(r.b)("br",null)," v + e"),Object(r.b)("td",i({parentName:"tr"},{align:"left"}))))),Object(r.b)("p",null,"*"," Where v = number of visited vertices; e = number of visited edges",Object(r.b)("br",{parentName:"p"}),"\n","*"," Where b = branching factor of the tree/graph, d = depth of the goal node."),Object(r.b)("h2",{id:"references"},"References"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.geeksforgeeks.org/a-search-algorithm/"}),"Geeksforgeeks")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://en.wikipedia.org/wiki/A*_search_algorithm"}),"Wikipedia")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",i({parentName:"li"},{href:"https://www.youtube.com/watch?v=vP5TkF0xJgI&ab_channel=GeeksforGeeks"}),"YouTube"))))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Graph/AStar.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-graph-a-star-mdx-a5d9602813c81b5b7699.js.map