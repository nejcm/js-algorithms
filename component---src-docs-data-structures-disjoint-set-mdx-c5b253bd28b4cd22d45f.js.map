{"version":3,"sources":["webpack:///../src/docs/DataStructures/DisjointSet.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","alt","src","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,yNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,2lBAOA,qBAAG,mBAAKC,IAAI,eAAeC,IAAI,oFAC/B,qBAAG,kBAAIC,WAAW,KAAf,WAAH,0BACA,qBAAG,mBAAKF,IAAI,eAAeC,IAAI,qFAC/B,iDAAgC,kBAAIC,WAAW,KAAf,SAAhC,qCACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,gEADQ,kBAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,8DADQ,cAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,gDADQ,YAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,wCADQ,cAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,8HADQ,uB,uNAQ1BN,EAAWO,gBAAiB","file":"component---src-docs-data-structures-disjoint-set-mdx-c5b253bd28b4cd22d45f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/js-algorithms/js-algorithms/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"disjoint-set\"\n    }}>{`Disjoint-set`}</h1>\n    <p>{`A disjoint-set data structure (also called a union–find data structure or merge–find set)\nis a data structure that tracks a set of elements partitioned into a number of disjoint\n(non-overlapping) subsets. It provides near-constant-time operations (bounded by the\ninverse Ackermann function) to add new sets, to merge existing sets, and to determine\nwhether elements are in the same set. In addition to many other uses (see the Applications\nsection), disjoint-sets play a key role in Kruskal's algorithm for finding the minimum\nspanning tree of a graph. (Source: Wikipedia)`}</p>\n    <p><img alt=\"disjoint set\" src=\"https://upload.wikimedia.org/wikipedia/commons/6/67/Dsu_disjoint_sets_init.svg\" /></p>\n    <p><em parentName=\"p\">{`MakeSet`}</em>{` creates 8 singletons.`}</p>\n    <p><img alt=\"disjoint set\" src=\"https://upload.wikimedia.org/wikipedia/commons/a/ac/Dsu_disjoint_sets_final.svg\" /></p>\n    <p>{`After some operations of `}<em parentName=\"p\">{`Union`}</em>{`, some sets are grouped together.`}</p>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.geeksforgeeks.org/disjoint-set-data-structures/\"\n        }}>{`Geeksforgeeks`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Disjoint-set_data_structure\"\n        }}>{`Wikipedia`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=wU6udHRIkcc\"\n        }}>{`YouTube`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.programiz.com/dsa/stack\"\n        }}>{`Programiz`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.hackerearth.com/practice/data-structures/disjoint-data-strutures/basics-of-disjoint-data-structures/tutorial/\"\n        }}>{`Hackerearth`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}