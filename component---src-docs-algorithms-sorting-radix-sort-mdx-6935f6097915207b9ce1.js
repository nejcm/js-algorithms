(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{ejvj:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return o})),a.d(t,"default",(function(){return s}));var r=a("Fcif"),n=a("+I+c"),i=(a("mXGw"),a("/FXl")),c=a("TjRS"),o=(a("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Sorting/RadixSort.mdx"}});var b={_frontmatter:o},l=c.a;function s(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)(l,Object(r.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"radix-sort"},"Radix Sort"),Object(i.b)("p",null,"In computer science, radix sort is a non-comparative sorting algorithm. It avoids\ncomparison by creating and distributing elements into buckets according to their radix.\nFor elements with more than one significant digit, this bucketing process is repeated for\neach digit, while preserving the ordering of the prior step, until all digits have been\nconsidered. For this reason, radix sort has also been called bucket sort and digital sort.\n(Source: Wikipedia)"),Object(i.b)("p",null,"Advantages:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Fast when the keys are short i.e. when the range of the array elements is less."),Object(i.b)("li",{parentName:"ul"},"Used in suffix array constuction algorithms like Manber's algorithm and DC3 algorithm.")),Object(i.b)("p",null,"Disadvantages:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Since Radix Sort depends on digits or letters, Radix Sort is much less flexible than\nother sorts. Hence , for every different type of data it needs to be rewritten."),Object(i.b)("li",{parentName:"ul"},"The constant for Radix sort is greater compared to other sorting algorithms."),Object(i.b)("li",{parentName:"ul"},"It takes more space compared to Quicksort which is inplace sorting.")),Object(i.b)("p",null,"(Source: Hackerearth)"),Object(i.b)("p",null,Object(i.b)("img",{alt:"Radix Sort",src:"https://www.researchgate.net/publication/291086231/figure/fig1/AS:614214452404240@1523451545568/Simplistic-illustration-of-the-steps-performed-in-a-radix-sort-In-this-example-the.png"})),Object(i.b)("h2",{id:"pseudocode"},"Pseudocode"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"radixSort(array)\n  d <- maximum number of digits in the largest element\n  create d buckets of size 0-9\n  for i <- 0 to d\n    sort the elements according to ith place digits using countingSort\n\ncountingSort(array, d)\n  max <- find largest element among dth place elements\n  initialize count array with all zeros\n  for j <- 0 to size\n    find the total count of each unique digit in dth place of elements and\n    store the count at jth index in count array\n  for i <- 1 to max\n    find the cumulative sum and store it in count array itself\n  for j <- size down to 1\n    restore the elements to array\n    decrease count of each element restored by 1\n")),Object(i.b)("h2",{id:"complexity"},"Complexity"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Best"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Average"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Worst"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Memory"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Stable"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Comments"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Radix sort"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"n ","*"," k"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"n ","*"," k"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"n ","*"," k"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"n + k"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"Yes"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"k - length of longest key")))),Object(i.b)("h2",{id:"references"},"References"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.geeksforgeeks.org/radix-sort/"}),"Geeksforgeeks")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Radix_sort"}),"Wikipedia")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=nu4gDuFabIM&ab_channel=GeeksforGeeks"}),"YouTube")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.programiz.com/dsa/radix-sort"}),"Programiz")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.hackerearth.com/practice/algorithms/sorting/radix-sort/tutorial/"}),"Hackerearth"))))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Sorting/RadixSort.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-sorting-radix-sort-mdx-6935f6097915207b9ce1.js.map