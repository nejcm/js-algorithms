(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{"8Ml1":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return l}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),r=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Pattern/Naive.mdx"}});var b={_frontmatter:o},c=r.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(c,i({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"naive-algorithm"},"Naive algorithm"),Object(a.b)("p",null,"The naive approach to the string matching problem is walking through the source\nstarting from the beginning and checking at each position if the resulting\nsubstring equals the query pattern. While being inefficient, it may be\nbeneficial to use it in cases where the speed advantage of another algorithm is\nneglegible or does not outhweigh the additional setup needed (for example if\nyour source and query pattern are really short). (Source: Wikipedia)"),Object(a.b)("h2",{id:"complexity"},"Complexity"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",i({parentName:"tr"},{align:null}),"Name"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Preprocessing"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Average"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Worst"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Space"),Object(a.b)("th",i({parentName:"tr"},{align:"left"}),"Comments"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),"Naive algorithm"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"none"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"n","*","m"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"m","*","(n-m+1)"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"none"),Object(a.b)("td",i({parentName:"tr"},{align:"left"}))))),Object(a.b)("p",null,"*"," Where n = length of the source; m = length of the query pattern; k = size of\nthe Alphabet"),Object(a.b)("h2",{id:"references"},"References"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.geeksforgeeks.org/naive-algorithm-for-pattern-searching/"}),"Geeksforgeeks")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://en.wikipedia.org/wiki/String-searching_algorithm"}),"Wikipedia")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.youtube.com/watch?v=nK7SLhXcqRo&ab_channel=GeeksforGeeks"}),"YouTube"))))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Pattern/Naive.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-pattern-naive-mdx-7baa82373c23ccd05608.js.map