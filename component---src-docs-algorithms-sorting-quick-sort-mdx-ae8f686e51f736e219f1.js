(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{"r/hS":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return c})),a.d(t,"default",(function(){return s}));var r=a("Fcif"),n=a("+I+c"),i=(a("mXGw"),a("/FXl")),o=a("TjRS"),c=(a("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Sorting/QuickSort.mdx"}});var b={_frontmatter:c},l=o.a;function s(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)(l,Object(r.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"quick-sort"},"Quick Sort"),Object(i.b)("p",null,"Quicksort (sometimes called partition-exchange sort) is an efficient sorting algorithm.\nWhen implemented well, it can be about two or three times faster than its main\ncompetitors, merge sort and heapsort."),Object(i.b)("p",null,"Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from\nthe array and partitioning the other elements into two sub-arrays, according to whether\nthey are less than or greater than the pivot. The sub-arrays are then sorted recursively.\nThis can be done in-place, requiring small additional amounts of memory to perform the\nsorting."),Object(i.b)("p",null,'Quicksort is a comparison sort, meaning that it can sort items of any type for which a\n"less-than" relation (formally, a total order) is defined. Efficient implementations of\nQuicksort are not a stable sort, meaning that the relative order of equal sort items is\nnot preserved.'),Object(i.b)("p",null,"Animated visualization of the quicksort algorithm. The horizontal lines are pivot values."),Object(i.b)("p",null,Object(i.b)("img",{alt:"Quicksort",src:"https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif"})),Object(i.b)("h2",{id:"complexity"},"Complexity"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Best"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Average"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Worst"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Memory"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Stable"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Comments"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Quick sort"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"n","*","log(n)"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"n","*","log(n)"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"n",Object(i.b)("sup",null,"2")),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"No"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Quicksort is usually done in-place with O(log(n)) stack space")))),Object(i.b)("h2",{id:"references"},"References"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.geeksforgeeks.org/quick-sort/"}),"Geeksforgeeks")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Quicksort"}),"Wikipedia")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=SLauY6PpjW4"}),"YouTube")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.programiz.com/dsa/quick-sort"}),"Programiz")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"http://www.algomation.com/player?algorithm=58bb2ef75b2b830400b05118"}),"Algomation")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.hackerearth.com/practice/algorithms/sorting/quick-sort/tutorial/"}),"Hackerearth")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.tutorialspoint.com/data_structures_algorithms/quick_sort_algorithm.htm"}),"Tutorialspoint"))))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Sorting/QuickSort.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-sorting-quick-sort-mdx-ae8f686e51f736e219f1.js.map