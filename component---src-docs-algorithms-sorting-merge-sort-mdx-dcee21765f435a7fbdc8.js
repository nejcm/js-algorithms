(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{gNWz:function(e,t,r){"use strict";r.r(t),r.d(t,"_frontmatter",(function(){return o})),r.d(t,"default",(function(){return c}));r("5hJT"),r("W1QL"),r("K/PF"),r("t91x"),r("75LO"),r("PJhk"),r("mXGw");var a=r("/FXl"),n=r("TjRS");r("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Sorting/MergeSort.mdx"}});var l={_frontmatter:o},b=n.a;function c(e){var t=e.components,r=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,["components"]);return Object(a.b)(b,i({},l,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"merge-sort"},"Merge Sort"),Object(a.b)("p",null,"In computer science, merge sort (also commonly spelled mergesort) is an\nefficient, general-purpose, comparison-based sorting algorithm. Most\nimplementations produce a stable sort, which means that the order of equal\nelements is the same in the input and output. Merge sort is a divide and conquer\nalgorithm that was invented by John von Neumann in 1945. Conceptually, a merge\nsort works as follows (Source: Wikipedia):"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Divide the unsorted list into n sublists, each containing one element (a list\nof one element is considered sorted)."),Object(a.b)("li",{parentName:"ul"},"Repeatedly merge sublists to produce new sorted sublists until there is only\none sublist remaining. This will be the sorted list.")),Object(a.b)("p",null,Object(a.b)("img",{alt:"Merge Sort",src:"https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif"})),Object(a.b)("p",null,"A recursive merge sort algorithm used to sort an array of 7 integer values.\nThese are the steps a human would take to emulate merge sort (top-down)."),Object(a.b)("p",null,Object(a.b)("img",{alt:"Merge Sort",src:"https://upload.wikimedia.org/wikipedia/commons/e/e6/Merge_sort_algorithm_diagram.svg"})),Object(a.b)("h2",{id:"complexity"},"Complexity"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",i({parentName:"tr"},{align:null}),"Name"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Best"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Average"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Worst"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Memory"),Object(a.b)("th",i({parentName:"tr"},{align:"center"}),"Stable"),Object(a.b)("th",i({parentName:"tr"},{align:"left"}),"Comments"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),"Merge sort"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"n","*","log(n)"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"n","*","log(n)"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"n","*","log(n)"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"n"),Object(a.b)("td",i({parentName:"tr"},{align:"center"}),"Yes"),Object(a.b)("td",i({parentName:"tr"},{align:"left"}))))),Object(a.b)("h2",{id:"references"},"References"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.geeksforgeeks.org/merge-sort/"}),"Geeksforgeeks")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Merge_sort"}),"Wikipedia")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.youtube.com/watch?v=KF2j-9iSf4Q"}),"YouTube")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.programiz.com/dsa/merge-sort"}),"Programiz")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"http://www.algomation.com/player?algorithm=58bb32885b2b830400b05123"}),"Algomation")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.hackerearth.com/practice/algorithms/sorting/merge-sort/tutorial/"}),"Hackerearth")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.tutorialspoint.com/data_structures_algorithms/merge_sort_algorithm.htm"}),"Tutorialspoint"))))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Sorting/MergeSort.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-sorting-merge-sort-mdx-dcee21765f435a7fbdc8.js.map