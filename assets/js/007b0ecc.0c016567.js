"use strict";(self.webpackChunk_nejcm_js_algorithms=self.webpackChunk_nejcm_js_algorithms||[]).push([[8867],{8453:(e,t,i)=>{i.d(t,{R:()=>n,x:()=>a});var r=i(6540);const s={},o=r.createContext(s);function n(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:n(e.components),r.createElement(o.Provider,{value:t},e.children)}},9267:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>n,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"data-structures/bloom-filter","title":"Bloom filter","description":"A Bloom filter is a space-efficient probabilistic data structure, conceived by Burton","source":"@site/docs/data-structures/bloom-filter.md","sourceDirName":"data-structures","slug":"/data-structures/bloom-filter","permalink":"/js-algorithms/docs/data-structures/bloom-filter","draft":false,"unlisted":false,"editUrl":"https://github.com/nejcm/js-algorithms/edit/main/docs/data-structures/bloom-filter.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"Disjoint-set","permalink":"/js-algorithms/docs/data-structures/disjoint-set"},"next":{"title":"Algorithms","permalink":"/js-algorithms/docs/Algorithms/Overview"}}');var s=i(4848),o=i(8453);const n={sidebar_position:13},a="Bloom filter",l={},c=[{value:"References",id:"references",level:2}];function d(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"bloom-filter",children:"Bloom filter"})}),"\n",(0,s.jsx)(t.p,{children:'A Bloom filter is a space-efficient probabilistic data structure, conceived by Burton\nHoward Bloom in 1970, that is used to test whether an element is a member of a set. False\npositive matches are possible, but false negatives are not \u2013 in other words, a query\nreturns either "possibly in set" or "definitely not in set." Elements can be added to the\nset, but not removed (though this can be addressed with the counting Bloom filter\nvariant); the more items added, the larger the probability of false positives. (Source:\nWikipedia)'}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Bloom_filter.svg/360px-Bloom_filter.svg.png",alt:"Data Structure Visualization"})}),"\n",(0,s.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/",children:"Geeksforgeeks"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Bloom_filter",children:"Wikipedia"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.youtube.com/watch?v=bEmBh1HtYrw",children:"YouTube"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://hackernoon.com/probabilistic-data-structures-bloom-filter-5374112a7832",children:"Hackernoon"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);