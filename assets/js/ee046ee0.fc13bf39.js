"use strict";(self.webpackChunk_nejcm_js_algorithms=self.webpackChunk_nejcm_js_algorithms||[]).push([[9441],{75:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Algorithms/Other/KnapsackProblem","title":"Knapsack problem","description":"The knapsack problem is a problem in combinatorial optimization: Given a set of items,","source":"@site/docs/Algorithms/Other/KnapsackProblem.mdx","sourceDirName":"Algorithms/Other","slug":"/Algorithms/Other/KnapsackProblem","permalink":"/js-algorithms/docs/Algorithms/Other/KnapsackProblem","draft":false,"unlisted":false,"editUrl":"https://github.com/nejcm/js-algorithms/edit/main/docs/Algorithms/Other/KnapsackProblem.mdx","tags":[],"version":"current","frontMatter":{"name":"Knapsack problem","route":"/algorithms/other/knapsack-problem","menu":"Other"},"sidebar":"tutorialSidebar","previous":{"title":"BFS & DFS","permalink":"/js-algorithms/docs/Algorithms/Tree/BFS&DFS"},"next":{"title":"A\\\\*","permalink":"/js-algorithms/docs/Algorithms/Graph/AStar"}}');var s=n(4848),r=n(8453);const l={name:"Knapsack problem",route:"/algorithms/other/knapsack-problem",menu:"Other"},o="Knapsack problem",a={},c=[{value:"Complexity",id:"complexity",level:2},{value:"References",id:"references",level:2}];function h(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"knapsack-problem",children:"Knapsack problem"})}),"\n",(0,s.jsx)(t.p,{children:"The knapsack problem is a problem in combinatorial optimization: Given a set of items,\neach with a weight and a value, determine the number of each item to include in a\ncollection so that the total weight is less than or equal to a given limit and the total\nvalue is as large as possible. It derives its name from the problem faced by someone who\nis constrained by a fixed-size knapsack and must fill it with the most valuable items. The\nproblem often arises in resource allocation where the decision makers have to choose from\na set of non-divisible projects or tasks under a fixed budget or time constraint,\nrespectively. [Source: Wikipedia]"}),"\n",(0,s.jsx)(t.p,{children:"The knapsack problem is interesting from the perspective of computer science for many\nreasons:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The decision problem form of the knapsack problem (Can a value of at least V be achieved\nwithout exceeding the weight W?) is NP-complete, thus there is no known algorithm both\ncorrect and fast (polynomial-time) in all cases."}),"\n",(0,s.jsx)(t.li,{children:"While the decision problem is NP-complete, the optimization problem is NP-hard, its\nresolution is at least as difficult as the decision problem, and there is no known\npolynomial algorithm which can tell, given a solution, whether it is optimal (which\nwould mean that there is no solution with a larger V, thus solving the NP-complete\ndecision problem)."}),"\n",(0,s.jsx)(t.li,{children:"There is a pseudo-polynomial time algorithm using dynamic programming."}),"\n",(0,s.jsx)(t.li,{children:"There is a fully polynomial-time approximation scheme, which uses the pseudo-polynomial\ntime algorithm as a subroutine, described below."}),"\n",(0,s.jsx)(t.li,{children:'Many cases that arise in practice, and "random instances" from some distributions, can\nnonetheless be solved exactly.'}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"complexity",children:"Complexity"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Best time"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Space"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Comments"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Greedy approach"}),(0,s.jsxs)(t.td,{style:{textAlign:"center"},children:["2",(0,s.jsx)("sup",{children:"n"})]}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"1"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Finds optimal solution only with allowing fractions"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Dynamic programming approach"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"n * w"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"n * w"}),(0,s.jsx)(t.td,{style:{textAlign:"left"}})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"* Where n = number of items; w = capacity"}),"\n",(0,s.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/",children:"Geeksforgeeks"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Knapsack_problem",children:"Wikipedia"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.youtube.com/watch?v=oTTzNMHM05I&ab_channel=AbdulBari",children:"YouTube"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.youtube.com/watch?v=nLmhmB6NzcM&ab_channel=AbdulBari",children:"YouTube"})}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var i=n(6540);const s={},r=i.createContext(s);function l(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);