"use strict";(self.webpackChunk_nejcm_js_algorithms=self.webpackChunk_nejcm_js_algorithms||[]).push([[3154],{1975:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"Algorithms/Sorting/HeapSort","title":"Heap Sort","description":"View the implementation","source":"@site/docs/Algorithms/Sorting/HeapSort.mdx","sourceDirName":"Algorithms/Sorting","slug":"/Algorithms/Sorting/HeapSort","permalink":"/js-algorithms/docs/Algorithms/Sorting/HeapSort","draft":false,"unlisted":false,"editUrl":"https://github.com/nejcm/js-algorithms/edit/main/docs/Algorithms/Sorting/HeapSort.mdx","tags":[],"version":"current","frontMatter":{"name":"Heap sort","route":"/algorithms/sorting/heap-sort","menu":"Sorting"},"sidebar":"tutorialSidebar","previous":{"title":"Counting Sort","permalink":"/js-algorithms/docs/Algorithms/Sorting/CountingSort"},"next":{"title":"Insertion Sort","permalink":"/js-algorithms/docs/Algorithms/Sorting/InsertionSort"}}');var i=r(4848),s=r(8453);const o={name:"Heap sort",route:"/algorithms/sorting/heap-sort",menu:"Sorting"},l="Heap Sort",a={},h=[{value:"Complexity",id:"complexity",level:2},{value:"References",id:"references",level:2}];function c(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"heap-sort",children:"Heap Sort"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/nejcm/js-algorithms/blob/master/src/algorithms/sorting/heap-sort/index.ts",children:"View the implementation"})}),"\n",(0,i.jsx)(t.p,{children:"Heapsort is a comparison-based sorting algorithm. Heapsort can be thought of as an\nimproved selection sort: like selection sort, heapsort divides its input into a sorted and\nan unsorted region, and it iteratively shrinks the unsorted region by extracting the\nlargest element from it and inserting it into the sorted region. Unlike selection sort,\nheapsort does not waste time with a linear-time scan of the unsorted region; rather, heap\nsort maintains the unsorted region in a heap data structure to more quickly find the\nlargest element in each step. (Source: Wikipedia)"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://upload.wikimedia.org/wikipedia/commons/1/1b/Sorting_heapsort_anim.gif",alt:"Algorithm Visualization"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://upload.wikimedia.org/wikipedia/commons/4/4d/Heapsort-example.gif",alt:"Algorithm Visualization"})}),"\n",(0,i.jsx)(t.h2,{id:"complexity",children:"Complexity"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Name"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Best"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Average"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Worst"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Memory"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Stable"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Comments"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Heap sort"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"n*log(n)"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"n*log(n)"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"n*log(n)"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"1"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,i.jsx)(t.td,{style:{textAlign:"left"}})]})})]}),"\n",(0,i.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.geeksforgeeks.org/heap-sort/",children:"Geeksforgeeks"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Heapsort",children:"Wikipedia"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.youtube.com/watch?v=2DmK_H7IdTo&ab_channel=MichaelSambol",children:"YouTube"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.programiz.com/dsa/heap-sort",children:"Programiz"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.hackerearth.com/practice/algorithms/sorting/heap-sort/tutorial/",children:"Hackerearth"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>l});var n=r(6540);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);