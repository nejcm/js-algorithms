"use strict";(self.webpackChunk_nejcm_js_algorithms=self.webpackChunk_nejcm_js_algorithms||[]).push([[6550],{4041:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Algorithms/Sorting/SelectionSort","title":"Selection Sort","description":"View the implementation","source":"@site/docs/Algorithms/Sorting/SelectionSort.mdx","sourceDirName":"Algorithms/Sorting","slug":"/Algorithms/Sorting/SelectionSort","permalink":"/js-algorithms/docs/Algorithms/Sorting/SelectionSort","draft":false,"unlisted":false,"editUrl":"https://github.com/nejcm/js-algorithms/edit/main/docs/Algorithms/Sorting/SelectionSort.mdx","tags":[],"version":"current","frontMatter":{"name":"Selection sort","route":"/algorithms/sorting/selection-sort","menu":"Sorting"},"sidebar":"tutorialSidebar","previous":{"title":"Radix Sort","permalink":"/js-algorithms/docs/Algorithms/Sorting/RadixSort"},"next":{"title":"Shell Sort","permalink":"/js-algorithms/docs/Algorithms/Sorting/ShellSort"}}');var s=i(4848),r=i(8453);const o={name:"Selection sort",route:"/algorithms/sorting/selection-sort",menu:"Sorting"},l="Selection Sort",h={},c=[{value:"Complexity",id:"complexity",level:2},{value:"References",id:"references",level:2}];function a(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"selection-sort",children:"Selection Sort"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/nejcm/js-algorithms/blob/master/src/algorithms/sorting/selection-sort/index.ts",children:"View the implementation"})}),"\n",(0,s.jsx)(t.p,{children:"Selection sort is an in-place comparison sorting algorithm. It has an O(n2) time\ncomplexity, which makes it inefficient on large lists, and generally performs worse than\nthe similar insertion sort. Selection sort is noted for its simplicity and has performance\nadvantages over more complicated algorithms in certain situations, particularly where\nauxiliary memory is limited."}),"\n",(0,s.jsx)(t.p,{children:"The algorithm divides the input list into two parts: a sorted sublist of items which is\nbuilt up from left to right at the front (left) of the list and a sublist of the remaining\nunsorted items that occupy the rest of the list. Initially, the sorted sublist is empty\nand the unsorted sublist is the entire input list. The algorithm proceeds by finding the\nsmallest (or largest, depending on sorting order) element in the unsorted sublist,\nexchanging (swapping) it with the leftmost unsorted element (putting it in sorted order),\nand moving the sublist boundaries one element to the right."}),"\n",(0,s.jsx)(t.p,{children:"The time efficiency of selection sort is quadratic, so there are a number of sorting\ntechniques which have better time complexity than selection sort. One thing which\ndistinguishes selection sort from other sorting algorithms is that it makes the minimum\npossible number of swaps, n \u2212 1 in the worst case.(Source: Wikipedia)"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.img,{src:"https://upload.wikimedia.org/wikipedia/commons/b/b0/Selection_sort_animation.gif",alt:"Algorithm Visualization"}),"\n",(0,s.jsx)(t.img,{src:"https://upload.wikimedia.org/wikipedia/commons/9/94/Selection-Sort-Animation.gif",alt:"Algorithm Visualization"})]}),"\n",(0,s.jsx)(t.h2,{id:"complexity",children:"Complexity"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Best"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Average"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Worst"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Memory"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Stable"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Comments"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Selection sort"}),(0,s.jsxs)(t.td,{style:{textAlign:"center"},children:["n",(0,s.jsx)("sup",{children:"2"})]}),(0,s.jsxs)(t.td,{style:{textAlign:"center"},children:["n",(0,s.jsx)("sup",{children:"2"})]}),(0,s.jsxs)(t.td,{style:{textAlign:"center"},children:["n",(0,s.jsx)("sup",{children:"2"})]}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"1"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,s.jsx)(t.td,{style:{textAlign:"left"}})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.geeksforgeeks.org/selection-sort/",children:"Geeksforgeeks"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Selection_sort",children:"Wikipedia"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.youtube.com/watch?v=xWBP4lzkoyM&ab_channel=GeeksforGeeks",children:"YouTube"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.programiz.com/dsa/selection-sort",children:"Programiz"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"http://www.algomation.com/player?algorithm=58b44c490e406f04000c7137",children:"Algomation"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.hackerearth.com/practice/algorithms/sorting/selection-sort/tutorial/",children:"Hackerearth"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.tutorialspoint.com/data_structures_algorithms/selection_sort_algorithm.htm",children:"Tutorialspoint"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>l});var n=i(6540);const s={},r=n.createContext(s);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);