"use strict";(self.webpackChunk_nejcm_js_algorithms=self.webpackChunk_nejcm_js_algorithms||[]).push([[9436],{8211:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"Algorithms/Sorting/MergeSort","title":"Merge Sort","description":"View the implementation","source":"@site/docs/Algorithms/Sorting/MergeSort.mdx","sourceDirName":"Algorithms/Sorting","slug":"/Algorithms/Sorting/MergeSort","permalink":"/js-algorithms/docs/Algorithms/Sorting/MergeSort","draft":false,"unlisted":false,"editUrl":"https://github.com/nejcm/js-algorithms/edit/main/docs/Algorithms/Sorting/MergeSort.mdx","tags":[],"version":"current","frontMatter":{"name":"Merge sort","route":"/algorithms/sorting/merge-sort","menu":"Sorting"},"sidebar":"tutorialSidebar","previous":{"title":"Insertion Sort","permalink":"/js-algorithms/docs/Algorithms/Sorting/InsertionSort"},"next":{"title":"Quick Sort","permalink":"/js-algorithms/docs/Algorithms/Sorting/QuickSort"}}');var s=r(4848),i=r(8453);const o={name:"Merge sort",route:"/algorithms/sorting/merge-sort",menu:"Sorting"},l="Merge Sort",a={},h=[{value:"Complexity",id:"complexity",level:2},{value:"References",id:"references",level:2}];function c(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"merge-sort",children:"Merge Sort"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/nejcm/js-algorithms/blob/master/src/algorithms/sorting/merge-sort/index.ts",children:"View the implementation"})}),"\n",(0,s.jsx)(t.p,{children:"In computer science, merge sort (also commonly spelled mergesort) is an efficient,\ngeneral-purpose, comparison-based sorting algorithm. Most implementations produce a stable\nsort, which means that the order of equal elements is the same in the input and output.\nMerge sort is a divide and conquer algorithm that was invented by John von Neumann\nin 1945. Conceptually, a merge sort works as follows (Source: Wikipedia):"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Divide the unsorted list into n sublists, each containing one element (a list of one\nelement is considered sorted)."}),"\n",(0,s.jsx)(t.li,{children:"Repeatedly merge sublists to produce new sorted sublists until there is only one sublist\nremaining. This will be the sorted list."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif",alt:"Merge Sort"})}),"\n",(0,s.jsx)(t.p,{children:"A recursive merge sort algorithm used to sort an array of 7 integer values. These are the\nsteps a human would take to emulate merge sort (top-down)."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://upload.wikimedia.org/wikipedia/commons/e/e6/Merge_sort_algorithm_diagram.svg",alt:"Merge Sort"})}),"\n",(0,s.jsx)(t.h2,{id:"complexity",children:"Complexity"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Best"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Average"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Worst"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Memory"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Stable"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Comments"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Merge sort"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"n*log(n)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"n*log(n)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"n*log(n)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"n"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,s.jsx)(t.td,{style:{textAlign:"left"}})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.geeksforgeeks.org/merge-sort/",children:"Geeksforgeeks"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Merge_sort",children:"Wikipedia"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.youtube.com/watch?v=KF2j-9iSf4Q",children:"YouTube"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.programiz.com/dsa/merge-sort",children:"Programiz"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"http://www.algomation.com/player?algorithm=58bb32885b2b830400b05123",children:"Algomation"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.hackerearth.com/practice/algorithms/sorting/merge-sort/tutorial/",children:"Hackerearth"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.tutorialspoint.com/data_structures_algorithms/merge_sort_algorithm.htm",children:"Tutorialspoint"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>l});var n=r(6540);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);