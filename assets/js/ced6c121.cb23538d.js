"use strict";(self.webpackChunk_nejcm_js_algorithms=self.webpackChunk_nejcm_js_algorithms||[]).push([[7062],{8453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>l});var r=o(6540);const i={},n=r.createContext(i);function s(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(n.Provider,{value:t},e.children)}},9462:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Algorithms/Graph/TopologicalSort","title":"Topological Sort","description":"View the implementation","source":"@site/docs/Algorithms/Graph/TopologicalSort.mdx","sourceDirName":"Algorithms/Graph","slug":"/Algorithms/Graph/TopologicalSort","permalink":"/js-algorithms/docs/Algorithms/Graph/TopologicalSort","draft":false,"unlisted":false,"editUrl":"https://github.com/nejcm/js-algorithms/edit/main/docs/Algorithms/Graph/TopologicalSort.mdx","tags":[],"version":"current","frontMatter":{"name":"Topological sort","route":"/algorithms/graph/topological-sort","menu":"Graph"},"sidebar":"tutorialSidebar","previous":{"title":"Strongly Connected Components","permalink":"/js-algorithms/docs/Algorithms/Graph/StronglyConnectedComponents"},"next":{"title":"Travelling Salesman Problem","permalink":"/js-algorithms/docs/Algorithms/Graph/TravellingSalesman"}}');var i=o(4848),n=o(8453);const s={name:"Topological sort",route:"/algorithms/graph/topological-sort",menu:"Graph"},l="Topological Sort",a={},c=[{value:"Complexity",id:"complexity",level:2},{value:"References",id:"references",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"topological-sort",children:"Topological Sort"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/nejcm/js-algorithms/blob/master/src/algorithms/graph/topological-sort/index.ts",children:"View the implementation"})}),"\n",(0,i.jsx)(t.p,{children:"Or topological ordering of a directed graph is a linear ordering of its vertices such that\nfor every directed edge uv from vertex u to vertex v, u comes before v in the ordering.\nFor instance, the vertices of the graph may represent tasks to be performed, and the edges\nmay represent constraints that one task must be performed before another; in this\napplication, a topological ordering is just a valid sequence for the tasks. A topological\nordering is possible if and only if the graph has no directed cycles, that is, if it is a\ndirected acyclic graph (DAG). Any DAG has at least one topological ordering, and\nalgorithms are known for constructing a topological ordering of any DAG in linear time.\n[Source: Wikipedia]"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://upload.wikimedia.org/wikipedia/commons/0/03/Directed_acyclic_graph_2.svg",alt:"Topologic sorting"})}),"\n",(0,i.jsx)(t.p,{children:"The graph shown above has many valid topological sorts:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"5, 7, 3, 11, 8, 2, 9, 10"})," (visual left-to-right, top-to-bottom)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"3, 5, 7, 8, 11, 2, 9, 10"})," (smallest-numbered available vertex first)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"5, 7, 3, 8, 11, 10, 9, 2"})," (fewest edges first)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"7, 5, 11, 3, 10, 8, 9, 2"})," (largest-numbered available vertex first)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"5, 7, 11, 2, 3, 8, 9, 10"})," (attempting top-to-bottom, left-to-right)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"3, 7, 8, 5, 11, 10, 2, 9"})," (arbitrary)"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"complexity",children:"Complexity"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Best time"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Comments"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Topological sort"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"v + e"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Based on the algorithm used."})]})})]}),"\n",(0,i.jsx)(t.p,{children:"* Where v = number of vertices; e = number of edges"}),"\n",(0,i.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.geeksforgeeks.org/topological-sorting/",children:"Geeksforgeeks"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Topological_sorting",children:"Wikipedia"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.hackerearth.com/practice/algorithms/graphs/topological-sort/tutorial/",children:"Hackerearth"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);