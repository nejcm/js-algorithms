"use strict";(self.webpackChunk_nejcm_js_algorithms=self.webpackChunk_nejcm_js_algorithms||[]).push([[8307],{572:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>n,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"data-structures/trie","title":"Trie","description":"Also called digital tree or prefix tree, is a kind of search tree\u2014an ordered tree data","source":"@site/docs/data-structures/trie.md","sourceDirName":"data-structures","slug":"/data-structures/trie","permalink":"/js-algorithms/docs/data-structures/trie","draft":false,"unlisted":false,"editUrl":"https://github.com/nejcm/js-algorithms/edit/main/docs/data-structures/trie.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Tree","permalink":"/js-algorithms/docs/data-structures/tree"},"next":{"title":"Graph","permalink":"/js-algorithms/docs/data-structures/graph"}}');var i=r(4848),a=r(8453);const n={sidebar_position:10},o="Trie",c={},d=[{value:"References",id:"references",level:2}];function h(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"trie",children:"Trie"})}),"\n",(0,i.jsx)(t.p,{children:"Also called digital tree or prefix tree, is a kind of search tree\u2014an ordered tree data\nstructure used to store a dynamic set or associative array where the keys are usually\nstrings. Unlike a binary search tree, no node in the tree stores the key associated with\nthat node; instead, its position in the tree defines the key with which it is associated;\ni.e., the value of the key is distributed across the structure. All the descendants of a\nnode have a common prefix of the string associated with that node, and the root is\nassociated with the empty string. Keys tend to be associated with leaves, though some\ninner nodes may correspond to keys of interest. Hence, keys are not necessarily associated\nwith every node. For the space-optimized presentation of prefix tree, see compact prefix\ntree."}),"\n",(0,i.jsx)(t.p,{children:"In the example shown, keys are listed in the nodes and values below them. Each complete\nEnglish word has an arbitrary integer value associated with it. A trie can be seen as a\ntree-shaped deterministic finite automaton. Each finite language is generated by a trie\nautomaton, and each trie can be compressed into a deterministic acyclic finite state\nautomaton."}),"\n",(0,i.jsx)(t.p,{children:"Though tries can be keyed by character strings, they need not be. The same algorithms can\nbe adapted to serve similar functions on ordered lists of any construct; e.g.,\npermutations on a list of digits or shapes. In particular, a bitwise trie is keyed on the\nindividual bits making up any fixed-length binary datum, such as an integer or memory\naddress. (Source: Wikipedia)"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/1024px-Trie_example.svg.png",alt:"Data Structure Visualization"})}),"\n",(0,i.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.geeksforgeeks.org/trie-insert-and-search/",children:"Geeksforgeeks"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Trie",children:"Wikipedia"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.youtube.com/watch?v=zIjfhVPRZCg",children:"YouTube"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.hackerearth.com/practice/data-structures/advanced-data-structures/trie-keyword-tree/tutorial/",children:"Hackerearth"})}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>n,x:()=>o});var s=r(6540);const i={},a=s.createContext(i);function n(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);