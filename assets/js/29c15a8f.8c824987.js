"use strict";(self.webpackChunk_nejcm_js_algorithms=self.webpackChunk_nejcm_js_algorithms||[]).push([[420],{2066:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"data-structures/linked-list","title":"Linked list","description":"Is a linear collection of data elements, whose order is not given by their physical","source":"@site/docs/data-structures/linked-list.md","sourceDirName":"data-structures","slug":"/data-structures/linked-list","permalink":"/js-algorithms/docs/data-structures/linked-list","draft":false,"unlisted":false,"editUrl":"https://github.com/nejcm/js-algorithms/edit/main/docs/data-structures/linked-list.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Heap","permalink":"/js-algorithms/docs/data-structures/heap"},"next":{"title":"Priority queue","permalink":"/js-algorithms/docs/data-structures/priority-queue"}}');var n=s(4848),r=s(8453);const l={sidebar_position:5},a="Linked list",o={},c=[{value:"Complexity",id:"complexity",level:2},{value:"References",id:"references",level:2}];function d(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"linked-list",children:"Linked list"})}),"\n",(0,n.jsx)(t.p,{children:"Is a linear collection of data elements, whose order is not given by their physical\nplacement in memory. Instead, each element points to the next. It is a data structure\nconsisting of a collection of nodes which together represent a sequence. In its most basic\nform, each node contains: data, and a reference (in other words, a link) to the next node\nin the sequence. This structure allows for efficient insertion or removal of elements from\nany position in the sequence during iteration. More complex variants add additional links,\nallowing more efficient insertion or removal of nodes at arbitrary positions. A drawback\nof linked lists is that access time is linear (and difficult to pipeline). Faster access,\nsuch as random access, is not feasible. Arrays have better cache locality compared to\nlinked lists."}),"\n",(0,n.jsx)(t.p,{children:"Linked lists are among the simplest and most common data structures. They can be used to\nimplement several other common abstract data types, including lists, stacks, queues,\nassociative arrays, and S-expressions, though it is not uncommon to implement those data\nstructures directly without using a linked list as the basis."}),"\n",(0,n.jsx)(t.p,{children:"Disadvantages:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"They use more memory than arrays because of the storage used by their pointers."}),"\n",(0,n.jsx)(t.li,{children:"Nodes in a linked list must be read in order from the beginning as linked lists are\ninherently sequential access."}),"\n",(0,n.jsx)(t.li,{children:"Nodes are stored noncontiguously, greatly increasing the time periods required to access\nindividual elements within the list, especially with a CPU cache."}),"\n",(0,n.jsx)(t.li,{children:"Difficulties arise in linked lists when it comes to reverse traversing. For instance,\nsingly-linked lists are cumbersome to navigate backward [1] and while doubly linked\nlists are somewhat easier to read, memory is consumed in allocating space for a\nback-pointer."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"(Source: Wikipedia)"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2013/03/Linkedlist.png",alt:"Data Structure Visualization"})}),"\n",(0,n.jsx)(t.h2,{id:"complexity",children:"Complexity"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Access"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Search"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Insertion"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Deletion"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Comments"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"O(n)"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"O(n)"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"O(n)"}),(0,n.jsx)(t.td,{style:{textAlign:"left"}})]})})]}),"\n",(0,n.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.geeksforgeeks.org/data-structures/linked-list/",children:"Geeksforgeeks"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Linked_list",children:"Wikipedia"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.youtube.com/watch?v=njTh_OwMljA",children:"YouTube"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.programiz.com/dsa/linked-list",children:"Programiz"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.hackerearth.com/practice/data-structures/linked-list/singly-linked-list/tutorial/",children:"Hackerearth"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.tutorialspoint.com/data_structures_algorithms/linked_list_algorithms.htm",children:"Tutorialspoint"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>a});var i=s(6540);const n={},r=i.createContext(n);function l(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);