"use strict";(self.webpackChunk_nejcm_js_algorithms=self.webpackChunk_nejcm_js_algorithms||[]).push([[4672],{2854:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"data-structures/disjoint-set","title":"Disjoint-set","description":"A disjoint-set data structure (also called a union\u2013find data structure or merge\u2013find set)","source":"@site/docs/data-structures/disjoint-set.md","sourceDirName":"data-structures","slug":"/data-structures/disjoint-set","permalink":"/js-algorithms/docs/data-structures/disjoint-set","draft":false,"unlisted":false,"editUrl":"https://github.com/nejcm/js-algorithms/edit/main/docs/data-structures/disjoint-set.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12},"sidebar":"tutorialSidebar","previous":{"title":"Graph","permalink":"/js-algorithms/docs/data-structures/graph"},"next":{"title":"Bloom filter","permalink":"/js-algorithms/docs/data-structures/bloom-filter"}}');var n=s(4848),r=s(8453);const a={sidebar_position:12},o="Disjoint-set",d={},c=[{value:"References",id:"references",level:2}];function u(e){const t={a:"a",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"disjoint-set",children:"Disjoint-set"})}),"\n",(0,n.jsx)(t.p,{children:"A disjoint-set data structure (also called a union\u2013find data structure or merge\u2013find set)\nis a data structure that tracks a set of elements partitioned into a number of disjoint\n(non-overlapping) subsets. It provides near-constant-time operations (bounded by the\ninverse Ackermann function) to add new sets, to merge existing sets, and to determine\nwhether elements are in the same set. In addition to many other uses (see the Applications\nsection), disjoint-sets play a key role in Kruskal's algorithm for finding the minimum\nspanning tree of a graph. (Source: Wikipedia)"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://upload.wikimedia.org/wikipedia/commons/6/67/Dsu_disjoint_sets_init.svg",alt:"disjoint set"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"MakeSet"})," creates 8 singletons."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://upload.wikimedia.org/wikipedia/commons/a/ac/Dsu_disjoint_sets_final.svg",alt:"disjoint set"})}),"\n",(0,n.jsxs)(t.p,{children:["After some operations of ",(0,n.jsx)(t.em,{children:"Union"}),", some sets are grouped together."]}),"\n",(0,n.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.geeksforgeeks.org/disjoint-set-data-structures/",children:"Geeksforgeeks"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Disjoint-set_data_structure",children:"Wikipedia"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.youtube.com/watch?v=wU6udHRIkcc",children:"YouTube"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.programiz.com/dsa/stack",children:"Programiz"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.hackerearth.com/practice/data-structures/disjoint-data-strutures/basics-of-disjoint-data-structures/tutorial/",children:"Hackerearth"})}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var i=s(6540);const n={},r=i.createContext(n);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);