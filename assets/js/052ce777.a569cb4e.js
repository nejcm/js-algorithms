"use strict";(self.webpackChunk_nejcm_js_algorithms=self.webpackChunk_nejcm_js_algorithms||[]).push([[3113],{5643:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"Algorithms/Sorting/ShellSort","title":"Shell Sort","description":"View the implementation","source":"@site/docs/Algorithms/Sorting/ShellSort.mdx","sourceDirName":"Algorithms/Sorting","slug":"/Algorithms/Sorting/ShellSort","permalink":"/js-algorithms/docs/Algorithms/Sorting/ShellSort","draft":false,"unlisted":false,"editUrl":"https://github.com/nejcm/js-algorithms/edit/main/docs/Algorithms/Sorting/ShellSort.mdx","tags":[],"version":"current","frontMatter":{"name":"Shell sort","route":"/algorithms/sorting/shell-sort","menu":"Sorting"},"sidebar":"tutorialSidebar","previous":{"title":"Selection Sort","permalink":"/js-algorithms/docs/Algorithms/Sorting/SelectionSort"},"next":{"title":"Tim Sort","permalink":"/js-algorithms/docs/Algorithms/Sorting/TimSort"}}');var s=r(4848),i=r(8453);const l={name:"Shell sort",route:"/algorithms/sorting/shell-sort",menu:"Sorting"},o="Shell Sort",h={},a=[{value:"Complexity",id:"complexity",level:2},{value:"References",id:"references",level:2}];function c(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"shell-sort",children:"Shell Sort"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/nejcm/js-algorithms/blob/master/src/algorithms/sorting/shell-sort/index.ts",children:"View the implementation"})}),"\n",(0,s.jsx)(t.p,{children:"Also known as Shell sort or Shell's method, is an in-place comparison sort. It can be seen\nas either a generalization of sorting by exchange (bubble sort) or sorting by insertion\n(insertion sort). The method starts by sorting pairs of elements far apart from each\nother, then progressively reducing the gap between elements to be compared. By starting\nwith far apart elements, it can move some out-of-place elements into position faster than\na simple nearest neighbor exchange. Donald Shell published the first version of this sort\nin 1959. The running time of Shellsort is heavily dependent on the gap sequence it uses.\nFor many practical variants, determining their time complexity remains an open problem.\n(Source: Wikipedia)"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://www.tutorialspoint.com/data_structures_algorithms/images/shell_sort.jpg",alt:"Algorithm Visualization"})}),"\n",(0,s.jsx)(t.h2,{id:"complexity",children:"Complexity"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Best"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Average"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Worst"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Memory"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Stable"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Comments"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Shell sort"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"n*log(n)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"n*log(n)"}),(0,s.jsxs)(t.td,{style:{textAlign:"center"},children:["n*(log(n))",(0,s.jsx)("sup",{children:"2"})]}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"1"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"No"}),(0,s.jsx)(t.td,{style:{textAlign:"left"}})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.geeksforgeeks.org/shellsort/",children:"Geeksforgeeks"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Shellsort",children:"Wikipedia"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.youtube.com/watch?v=ddeLSDsYVp8",children:"YouTube"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.programiz.com/dsa/shell-sort",children:"Programiz"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.tutorialspoint.com/data_structures_algorithms/shell_sort_algorithm.htm",children:"Tutorialspoint"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>o});var n=r(6540);const s={},i=n.createContext(s);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);