"use strict";(self.webpackChunk_nejcm_js_algorithms=self.webpackChunk_nejcm_js_algorithms||[]).push([[1418],{254:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Algorithms/Graph/ArticulationPoints","title":"Articulation Points","description":"View the implementation","source":"@site/docs/Algorithms/Graph/ArticulationPoints.mdx","sourceDirName":"Algorithms/Graph","slug":"/Algorithms/Graph/ArticulationPoints","permalink":"/js-algorithms/docs/Algorithms/Graph/ArticulationPoints","draft":false,"unlisted":false,"editUrl":"https://github.com/nejcm/js-algorithms/edit/main/docs/Algorithms/Graph/ArticulationPoints.mdx","tags":[],"version":"current","frontMatter":{"name":"Articulation points","route":"/algorithms/graph/articulation-points","menu":"Graph"},"sidebar":"tutorialSidebar","previous":{"title":"A\\\\*","permalink":"/js-algorithms/docs/Algorithms/Graph/AStar"},"next":{"title":"BFS & DFS","permalink":"/js-algorithms/docs/Algorithms/Graph/BFS&DFS"}}');var r=n(4848),s=n(8453);const o={name:"Articulation points",route:"/algorithms/graph/articulation-points",menu:"Graph"},l="Articulation Points",a={},c=[{value:"Complexity",id:"complexity",level:2},{value:"References",id:"references",level:2}];function h(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"articulation-points",children:"Articulation Points"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/nejcm/js-algorithms/blob/master/src/algorithms/graph/articulation-points/index.ts",children:"View the implementation"})}),"\n",(0,r.jsx)(t.p,{children:"A vertex in an undirected connected graph is an articulation point (or cut vertex) if\nremoving it (and edges through it) disconnects the graph. Articulation points represent\nvulnerabilities in a connected network \u2013 single points whose failure would split the\nnetwork into 2 or more components. They are useful for designing reliable networks. For a\ndisconnected undirected graph, an articulation point is a vertex removing which increases\nnumber of connected components. [Source: Geeksforgeeks]"}),"\n",(0,r.jsx)(t.h2,{id:"complexity",children:"Complexity"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Best time"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Comments"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Articulation points"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"v + e"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Based on the algorithm used."})]})})]}),"\n",(0,r.jsx)(t.p,{children:"* Where v = number of vertices; e = number of edges"}),"\n",(0,r.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://www.geeksforgeeks.org/articulation-points-or-cut-vertices-in-a-graph/",children:"Geeksforgeeks"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Biconnected_component",children:"Wikipedia"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://www.youtube.com/watch?v=jFZsDDB0-vo&ab_channel=AbdulBari",children:"YouTube"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://www.hackerearth.com/practice/algorithms/graphs/articulation-points-and-bridges/tutorial/",children:"Hackerearth"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://cp-algorithms.com/graph/cutpoints.html",children:"cp-algorithms"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var i=n(6540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);