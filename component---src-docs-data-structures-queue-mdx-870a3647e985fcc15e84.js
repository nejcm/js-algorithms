(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{J7Qt:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return i})),a.d(t,"default",(function(){return c}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("mXGw");var n=a("/FXl"),r=a("TjRS");a("aD51");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/DataStructures/Queue.mdx"}});var u={_frontmatter:i},s=r.a;function c(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(n.b)(s,o({},u,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"queue"},"Queue"),Object(n.b)("p",null,"Is a collection of entities that are maintained in a sequence and can be\nmodified by the addition of entities at one end of the sequence and the removal\nof entities from the other end of the sequence. By convention, the end of the\nsequence at which elements are added is called the back, tail, or rear of the\nqueue, and the end at which elements are removed is called the head or front of\nthe queue, analogously to the words used when people line up to wait for goods\nor services."),Object(n.b)("p",null,"The operation of adding an element to the rear of the queue is known as enqueue,\nand the operation of removing an element from the front is known as dequeue.\nOther operations may also be allowed, often including a peek or front operation\nthat returns the value of the next element to be dequeued without dequeuing it."),Object(n.b)("p",null,"The operations of a queue make it a first-in-first-out (FIFO) data structure. In\na FIFO data structure, the first element added to the queue will be the first\none to be removed. This is equivalent to the requirement that once a new element\nis added, all elements that were added before have to be removed before the new\nelement can be removed. A queue is an example of a linear data structure, or\nmore abstractly a sequential collection. Queues are common in computer programs,\nwhere they are implemented as data structures coupled with access routines, as\nan abstract data structure or in object-oriented languages as classes. Common\nimplementations are circular buffers and linked lists."),Object(n.b)("p",null,"Queues provide services in computer science, transport, and operations research\nwhere various entities such as data, objects, persons, or events are stored and\nheld to be processed later. In these contexts, the queue performs the function\nof a buffer. Another usage of queues is in the implementation of breadth-first\nsearch. (Source: Wikipedia)"),Object(n.b)("p",null,Object(n.b)("img",{alt:"Data Structure Visualization",src:"https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Data_Queue.svg/600px-Data_Queue.svg.png"})),Object(n.b)("h2",{id:"references"},"References"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",o({parentName:"li"},{href:"https://www.geeksforgeeks.org/queue-data-structure/"}),"Geeksforgeeks")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",o({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"}),"Wikipedia")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",o({parentName:"li"},{href:"https://www.youtube.com/watch?v=wjI1WNcIntg"}),"YouTube")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",o({parentName:"li"},{href:"https://www.youtube.com/watch?v=okr-XE8yTO8"}),"YouTube")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",o({parentName:"li"},{href:"https://www.programiz.com/dsa/queue"}),"Programiz")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",o({parentName:"li"},{href:"https://www.hackerearth.com/practice/data-structures/queues/basics-of-queues/tutorial/"}),"Hackerearth")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",o({parentName:"li"},{href:"https://www.tutorialspoint.com/data_structures_algorithms/dsa_queue.htm"}),"Tutorialspoint"))))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/DataStructures/Queue.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-data-structures-queue-mdx-870a3647e985fcc15e84.js.map