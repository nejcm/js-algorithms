(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{oww7:function(t,e,a){"use strict";a.r(e),a.d(e,"_frontmatter",(function(){return l})),a.d(e,"default",(function(){return m}));var n=a("Fcif"),b=a("+I+c"),r=(a("mXGw"),a("/FXl")),c=a("TjRS"),O=a("t8UX"),j=a.n(O),l=(a("aD51"),{});void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/BigO.mdx"}});var i={_frontmatter:l},p=c.a;function m(t){var e=t.components,a=Object(b.a)(t,["components"]);return Object(r.b)(p,Object(n.a)({},i,a,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"big-o-notation"},"Big O Notation"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Big O notation")," is used to classify algorithms according to how their running time or\nspace requirements grow as the input size grows. On the chart below you may find most\ncommon orders of growth of algorithms specified in Big O notation."),Object(r.b)("img",{src:j.a,width:"100%",height:"auto",alt:"Big O graphs"}),Object(r.b)("p",null,"Source: ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"http://bigocheatsheet.com/"}),"Big O Cheat Sheet"),"."),Object(r.b)("p",null,"More info:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.geeksforgeeks.org/analysis-algorithms-big-o-analysis/"}),"Geeksforgeeks")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Big_O_notation"}),"Wikipedia")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=v4cd1O4zkGw"}),"Youtube"))),Object(r.b)("hr",null),Object(r.b)("p",null,"Below is the list of some of the most used Big O notations and their performance\ncomparisons against different sizes of the input data."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Big O Notation"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Computations for 10 elements"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Computations for 100 elements"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Computations for 1000 elements"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"O(1)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"O(log N)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"3"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"6"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"9")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"O(N)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"100"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1000")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"O(N log N)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"30"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"600"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"9000")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"O(N^2)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"100"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1000000")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"O(2^N)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1.26e+29"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1.07e+301")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"O(N!)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"3628800"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"9.3e+157"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4.02e+2567")))),Object(r.b)("h3",{id:"data-structure-operations-complexity"},"Data Structure Operations Complexity"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Data Structure"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Access"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Search"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Insertion"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Deletion"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Comments"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Array")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Stack")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Queue")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Linked List")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Hash Table")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"In case of perfect hash function costs would be O(1)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Binary Search Tree")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"In case of balanced tree costs would be O(log(n))")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"B-Tree")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Red-Black Tree")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"AVL Tree")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Bloom Filter")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"False positives are possible while searching")))),Object(r.b)("h3",{id:"array-sorting-algorithms-complexity"},"Array Sorting Algorithms Complexity"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Best"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Average"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Worst"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Memory"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Stable"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Comments"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Bubble sort")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n",Object(r.b)("sup",null,"2")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n",Object(r.b)("sup",null,"2")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Yes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Insertion sort")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n",Object(r.b)("sup",null,"2")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n",Object(r.b)("sup",null,"2")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Yes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Selection sort")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n",Object(r.b)("sup",null,"2")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n",Object(r.b)("sup",null,"2")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n",Object(r.b)("sup",null,"2")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"No"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Heap sort")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"," ","log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"," ","log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"," ","log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"No"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Merge sort")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"," ","log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"," ","log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"," ","log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Yes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Quick sort")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"," ","log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"," ","log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n",Object(r.b)("sup",null,"2")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"No"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Quicksort is usually done in-place with O(log(n)) stack space")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Shell sort")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"," ","log(n)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"depends on gap sequence"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n"," ","(log(n))",Object(r.b)("sup",null,"2")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"No"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Counting sort")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n + r"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n + r"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n + r"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n + r"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Yes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"r - biggest number in array")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("strong",{parentName:"td"},"Radix sort")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n ","*"," k"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n ","*"," k"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n ","*"," k"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n + k"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Yes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"k - length of longest key")))))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/BigO.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-big-o-mdx-ac4fef6c1aefe2fa0648.js.map