{"version":3,"sources":["webpack:///../src/docs/DataStructures/HashTable.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","alt","src","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,uNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,mbAKA,6TAIA,mUAIA,mUAIA,qBAAG,mBAAKC,IAAI,aAAaC,IAAI,yFAC7B,sEACA,qBAAG,mBAAKD,IAAI,iBAAiBC,IAAI,yFACjC,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIC,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,0DADQ,kBAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,6CADQ,cAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,gDADQ,YAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,6CADQ,cAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,qGADQ,gBAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,sFADQ,0B,qNAQ1BN,EAAWO,gBAAiB","file":"component---src-docs-data-structures-hash-table-mdx-04662c3d6ad8d55ad373.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/js-algorithms/js-algorithms/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"hash-table\"\n    }}>{`Hash table`}</h1>\n    <p>{`A hash table (hash map) is a data structure that implements an associative array abstract\ndata type, a structure that can map keys to values. A hash table uses a hash function to\ncompute an index, also called a hash code, into an array of buckets or slots, from which\nthe desired value can be found. During lookup, the key is hashed and the resulting hash\nindicates where the corresponding value is stored.`}</p>\n    <p>{`Ideally, the hash function will assign each key to a unique bucket, but most hash table\ndesigns employ an imperfect hash function, which might cause hash collisions where the\nhash function generates the same index for more than one key. Such collisions are always\naccommodated in some way.`}</p>\n    <p>{`In a well-dimensioned hash table, the average cost (number of instructions) for each\nlookup is independent of the number of elements stored in the table. Many hash table\ndesigns also allow arbitrary insertions and deletions of key-value pairs, at (amortized)\nconstant average cost per operation.`}</p>\n    <p>{`In many situations, hash tables turn out to be on average more efficient than search trees\nor any other table lookup structure. For this reason, they are widely used in many kinds\nof computer software, particularly for associative arrays, database indexing, caches, and\nsets. (Source: Wikipedia)`}</p>\n    <p><img alt=\"Hash Table\" src=\"https://upload.wikimedia.org/wikipedia/commons/7/7d/Hash_table_3_1_1_0_1_0_0_SP.svg\" /></p>\n    <p>{`Hash collision resolved by separate chaining.`}</p>\n    <p><img alt=\"Hash Collision\" src=\"https://upload.wikimedia.org/wikipedia/commons/d/d0/Hash_table_5_0_1_1_1_1_1_LL.svg\" /></p>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.geeksforgeeks.org/hashing-data-structure/\"\n        }}>{`Geeksforgeeks`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Hash_table\"\n        }}>{`Wikipedia`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=shs0KM3wKv8\"\n        }}>{`YouTube`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.programiz.com/dsa/hash-table\"\n        }}>{`Programiz`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.hackerearth.com/practice/data-structures/hash-tables/basics-of-hash-tables/tutorial/\"\n        }}>{`Hackerearth`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.tutorialspoint.com/data_structures_algorithms/hash_data_structure.htm\"\n        }}>{`Tutorialspoint`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}