{"version":3,"sources":["webpack:///../src/docs/Algorithms/Graph/Dijkstra.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","alt","src","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,wNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,YADR,YAGA,4QAGA,+TAIA,wrBAQA,qBAAG,mBAAKC,IAAI,WAAWC,IAAI,gFAC3B,iBAAQ,CACN,GAAM,cADR,cAGA,yBACE,qBAAOC,WAAW,SAChB,kBAAIA,WAAW,SACb,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,WADX,cAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,cAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,YAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,WADX,wBAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,4CAIF,kBAAIA,WAAW,SACb,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,YAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,WADX,IAEQ,6BACR,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,qBAMN,+EACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,mFADQ,kBAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,yDADQ,cAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,qEADQ,YAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,qDADQ,cAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,kDADQ,yB,sNAQ1BN,EAAWO,gBAAiB","file":"component---src-docs-algorithms-graph-dijkstra-mdx-f3f6a61c3ad13687b188.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/js-algorithms/js-algorithms/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dijkstra\"\n    }}>{`Dijkstra`}</h1>\n    <p>{`Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a\ngraph, which may represent, for example, road networks. It was conceived by computer\nscientist Edsger W. Dijkstra in 1956 and published three years later.`}</p>\n    <p>{`The algorithm exists in many variants. Dijkstra's original algorithm found the shortest\npath between two given nodes, but a more common variant fixes a single node as the\n\"source\" node and finds shortest paths from the source to all other nodes in the graph,\nproducing a shortest-path tree.`}</p>\n    <p>{`For a given source node in the graph, the algorithm finds the shortest path between that\nnode and every other. It can also be used for finding the shortest paths from a single\nnode to a single destination node by stopping the algorithm once the shortest path to the\ndestination node has been determined. For example, if the nodes of the graph represent\ncities and edge path costs represent driving distances between pairs of cities connected\nby a direct road (for simplicity, ignore red lights, stop signs, toll roads and other\nobstructions), Dijkstra's algorithm can be used to find the shortest route between one\ncity and all other cities. `}{`[Source: Wikipedia]`}</p>\n    <p><img alt=\"Dijkstra\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/57/Dijkstra_Animation.gif\" /></p>\n    <h2 {...{\n      \"id\": \"complexity\"\n    }}>{`Complexity`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Worst time`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Comments`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Dijkstra`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`e + v `}{`*`}{` log(v)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Using fibonacci heap min-priority queue`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Dijkstra`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`v`}<sup>{`2`}</sup></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Using an array`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`*`}{` Where v = number of vertices; e = number of edges`}</p>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/\"\n        }}>{`Geeksforgeeks`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\"\n        }}>{`Wikipedia`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=XB4MIexjvY0&ab_channel=AbdulBari\"\n        }}>{`YouTube`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.programiz.com/dsa/dijkstra-algorithm\"\n        }}>{`Programiz`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://cp-algorithms.com/graph/dijkstra.html\"\n        }}>{`cp-algorithms`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}