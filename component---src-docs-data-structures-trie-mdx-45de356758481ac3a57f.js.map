{"version":3,"sources":["webpack:///../src/docs/DataStructures/Trie.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","alt","src","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,QADR,QAGA,8zBAWA,oYAKA,kZAKA,qBAAG,mBAAKC,IAAI,+BAA+BC,IAAI,4GAC/C,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0DADQ,kBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uCADQ,cAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gDADQ,YAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8GADQ,uB,gNAQ1BN,EAAWO,gBAAiB","file":"component---src-docs-data-structures-trie-mdx-45de356758481ac3a57f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/nejcm/js-algorithms/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"trie\"\n    }}>{`Trie`}</h1>\n    <p>{`Also called digital tree or prefix tree, is a kind of search treeâ€”an ordered\ntree data structure used to store a dynamic set or associative array where the\nkeys are usually strings. Unlike a binary search tree, no node in the tree\nstores the key associated with that node; instead, its position in the tree\ndefines the key with which it is associated; i.e., the value of the key is\ndistributed across the structure. All the descendants of a node have a common\nprefix of the string associated with that node, and the root is associated with\nthe empty string. Keys tend to be associated with leaves, though some inner\nnodes may correspond to keys of interest. Hence, keys are not necessarily\nassociated with every node. For the space-optimized presentation of prefix tree,\nsee compact prefix tree.`}</p>\n    <p>{`In the example shown, keys are listed in the nodes and values below them. Each\ncomplete English word has an arbitrary integer value associated with it. A trie\ncan be seen as a tree-shaped deterministic finite automaton. Each finite\nlanguage is generated by a trie automaton, and each trie can be compressed into\na deterministic acyclic finite state automaton.`}</p>\n    <p>{`Though tries can be keyed by character strings, they need not be. The same\nalgorithms can be adapted to serve similar functions on ordered lists of any\nconstruct; e.g., permutations on a list of digits or shapes. In particular, a\nbitwise trie is keyed on the individual bits making up any fixed-length binary\ndatum, such as an integer or memory address. (Source: Wikipedia)`}</p>\n    <p><img alt=\"Data Structure Visualization\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/1024px-Trie_example.svg.png\" /></p>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.geeksforgeeks.org/trie-insert-and-search/\"\n        }}>{`Geeksforgeeks`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Trie\"\n        }}>{`Wikipedia`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=zIjfhVPRZCg\"\n        }}>{`YouTube`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.hackerearth.com/practice/data-structures/advanced-data-structures/trie-keyword-tree/tutorial/\"\n        }}>{`Hackerearth`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}