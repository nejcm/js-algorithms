(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{pZq7:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return c})),a.d(t,"default",(function(){return h}));var r=a("Fcif"),s=a("+I+c"),i=(a("mXGw"),a("/FXl")),n=a("TjRS"),c=(a("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Tree/BFS&DFS.mdx"}});var o={_frontmatter:c},b=n.a;function h(e){var t=e.components,a=Object(s.a)(e,["components"]);return Object(i.b)(b,Object(r.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"bfs--dfs"},"BFS & DFS"),Object(i.b)("h2",{id:"breadth-first-search"},"Breadth first search"),Object(i.b)("p",null,"BFS (level order traversal) is a vertex based technique for finding a shortest path in\ntree. It uses a Queue data structure which follows first in first out. In BFS, one node is\nselected at a time when it is visited and marked then its adjacent are visited and stored\nin the queue. It is slower than DFS. ","[Source: Geeksforgeeks]"),Object(i.b)("p",null,"It starts traversing from a selected node (source or starting node) and traverse the tree\nlayerwise thus exploring the neighbour nodes (nodes which are directly connected to source\nnode). You must then move towards the next-level neighbour nodes."),Object(i.b)("h2",{id:"depth-first-search"},"Depth first search"),Object(i.b)("p",null,"DFS is a edge based technique. It uses the Stack data structure, performs two stages,\nfirst visited nodes are pushed into stack and second if there is no node then visited\nnodes are popped."),Object(i.b)("p",null,"The DFS algorithm is a recursive algorithm that uses the idea of backtracking. It involves\nexhaustive searches of all the nodes by going ahead, if possible, else by backtracking."),Object(i.b)("h2",{id:"references"},"References"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.geeksforgeeks.org/difference-between-bfs-and-dfs/"}),"Geeksforgeeks")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=pcKY4hjDrxk"}),"YouTube"))),Object(i.b)("h3",{id:"bfs"},"BFS"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/"}),"Geeksforgeeks")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Breadth-first_search"}),"Wikipedia")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.hackerearth.com/practice/algorithms/graphs/breadth-first-search/tutorial/"}),"Hackerearth")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.tutorialspoint.com/data_structures_algorithms/breadth_first_traversal.htm"}),"Tutorialspoint"))),Object(i.b)("h3",{id:"dfs"},"DFS"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.geeksforgeeks.org/depth-first-search-or-dfs-for-a-graph/"}),"Geeksforgeeks")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Depth-first_search"}),"Wikipedia")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.hackerearth.com/practice/algorithms/graphs/depth-first-search/tutorial/"}),"Hackerearth")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.tutorialspoint.com/data_structures_algorithms/depth_first_traversal.htm"}),"Tutorialspoint"))))}void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Tree/BFS&DFS.mdx"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-tree-bfs-dfs-mdx-55089e7f5b822aa7e179.js.map