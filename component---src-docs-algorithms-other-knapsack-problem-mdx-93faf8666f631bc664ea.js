(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{JoVb:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return l})),a.d(t,"default",(function(){return s}));var n=a("Fcif"),i=a("+I+c"),o=(a("mXGw"),a("/FXl")),r=a("TjRS"),l=(a("aD51"),{});void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Algorithms/Other/KnapsackProblem.mdx"}});var c={_frontmatter:l},b=r.a;function s(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(o.b)(b,Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"knapsack-problem"},"Knapsack problem"),Object(o.b)("p",null,"The knapsack problem is a problem in combinatorial optimization: Given a set of items,\neach with a weight and a value, determine the number of each item to include in a\ncollection so that the total weight is less than or equal to a given limit and the total\nvalue is as large as possible. It derives its name from the problem faced by someone who\nis constrained by a fixed-size knapsack and must fill it with the most valuable items. The\nproblem often arises in resource allocation where the decision makers have to choose from\na set of non-divisible projects or tasks under a fixed budget or time constraint,\nrespectively. ","[Source: Wikipedia]"),Object(o.b)("p",null,"The knapsack problem is interesting from the perspective of computer science for many\nreasons:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The decision problem form of the knapsack problem (Can a value of at least V be achieved\nwithout exceeding the weight W?) is NP-complete, thus there is no known algorithm both\ncorrect and fast (polynomial-time) in all cases."),Object(o.b)("li",{parentName:"ul"},"While the decision problem is NP-complete, the optimization problem is NP-hard, its\nresolution is at least as difficult as the decision problem, and there is no known\npolynomial algorithm which can tell, given a solution, whether it is optimal (which\nwould mean that there is no solution with a larger V, thus solving the NP-complete\ndecision problem)."),Object(o.b)("li",{parentName:"ul"},"There is a pseudo-polynomial time algorithm using dynamic programming."),Object(o.b)("li",{parentName:"ul"},"There is a fully polynomial-time approximation scheme, which uses the pseudo-polynomial\ntime algorithm as a subroutine, described below."),Object(o.b)("li",{parentName:"ul"},'Many cases that arise in practice, and "random instances" from some distributions, can\nnonetheless be solved exactly.')),Object(o.b)("h2",{id:"complexity"},"Complexity"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Best time"),Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Space"),Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Comments"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Greedy approach"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"2",Object(o.b)("sup",null,"n")),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Finds optimal solution only with allowing fractions")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Dynamic programming approach"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n ","*"," w"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"n ","*"," w"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))))),Object(o.b)("p",null,"*"," Where n = number of items; w = capacity"),Object(o.b)("h2",{id:"references"},"References"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/"}),"Geeksforgeeks")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Knapsack_problem"}),"Wikipedia")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=oTTzNMHM05I&ab_channel=AbdulBari"}),"YouTube")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=nLmhmB6NzcM&ab_channel=AbdulBari"}),"YouTube"))))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Algorithms/Other/KnapsackProblem.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-algorithms-other-knapsack-problem-mdx-93faf8666f631bc664ea.js.map